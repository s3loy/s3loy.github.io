<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CUDA-and-pytorch</title>
    <url>/CUDA-and-pytorch/</url>
    <content><![CDATA[<h1 id="在win系统上安装pytorch"><a class="markdownIt-Anchor" href="#在win系统上安装pytorch"></a> 在win系统上安装pytorch</h1>
<h2 id="step-1-安装conda"><a class="markdownIt-Anchor" href="#step-1-安装conda"></a> Step 1 安装Conda</h2>
<p><a href="https://www.anaconda.com/download/success">Download Now | Anaconda</a></p>
<p><code>Anaconda</code>和<code>Miniconda</code>都可以，前者东西全一些，后者更为轻便。</p>
<p>展示的是<code>Anaconda</code></p>
<p><s>此处下载推荐使用魔法</s></p>
<blockquote>
<p>如果网络不支持那就使用<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&amp;O=D">Index of /anaconda/archive/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
</blockquote>
<p><code>Anaconda3-2024.10-1-Windows-x86_64.exe</code>下载好之后打开</p>
<p>如果不想配置环境变量就选<code>All Users</code>吧。</p>
<p><img src="/CUDA-and-pytorch/image-20250218235016076-1740145143701-1.png" alt></p>
<p>然后推荐找个不是C盘的地方下</p>
<p><img src="/CUDA-and-pytorch/image-20250218235145695-1740145143701-2.png" alt></p>
<p><img src="/CUDA-and-pytorch/image-20250218235447531-1740145143701-4.png" alt></p>
<p>安装时间也许会比较长，别急。</p>
<p>装好之后可以测试一下<code>conda --version</code>,有这样的反应就好，版本不一定一样。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">conda <span class="literal">--version</span></span><br><span class="line">conda <span class="number">25.1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>因为我后面要玩<code>d2l</code>，所以就用<code>conda</code>创建了一个环境</p>
<p><code>conda create -n d2l python=3.10</code></p>
<p>这边<code>conda</code>是指令头，<code>-n</code> 是指定新环境的名称，<code>d2l</code> 是你想要为新环境指定的名称,<code>python=3.10</code>这部分指定了<code>python</code>的版本，不过其实不一定要<code>3.10</code>，<code>pytorch</code>官网上提示的是<code>Latest PyTorch requires Python 3.9 or later.</code>，加上学长爱用<code>3.10</code>，那就定了。<s>ps:3.10和3.9到底谁大呢</s></p>
<p>创建完成会提示的，后面需要激活一下</p>
<p><code>conda activate d2l</code></p>
<p>顺利的话就能看到<code>(d2l)</code>在输入的前面。</p>
<p>用的差不多之后要回到原来的环境的话就</p>
<p><code>conda deactivate</code></p>
<p>这样就回去了，不过你直接关掉重开也不是不行（</p>
<h2 id="step-2-cuda"><a class="markdownIt-Anchor" href="#step-2-cuda"></a> Step 2 CUDA</h2>
<p>笔记本电脑的GPU是<code>Nvidia 4060 laptop</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt;nvidia-smi</span><br><span class="line">Wed Feb <span class="number">19</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">11</span> <span class="number">2025</span></span><br><span class="line">+-----------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI <span class="number">571</span>.<span class="number">96</span>                 Driver Version: <span class="number">571</span>.<span class="number">96</span>         CUDA Version: <span class="number">12</span>.<span class="number">8</span>     |</span><br><span class="line">|-----------------------------------------+------------------------+----------------------+</span><br><span class="line">| GPU  Name                  Driver-Model | Bus-Id          Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                                         |                        |               MIG M. |</span><br><span class="line">|=========================================+========================+======================|</span><br><span class="line">|   <span class="number">0</span>  NVIDIA GeForce RTX <span class="number">4060</span> ...  WDDM  |   <span class="number">00000000</span>:<span class="number">01</span>:<span class="number">00</span>.<span class="number">0</span>  On |                  N/A |</span><br><span class="line">| N/A   <span class="number">39</span>C    P8              <span class="number">3</span>W /  <span class="number">115</span>W |    <span class="number">1533</span>MiB /   <span class="number">8188</span>MiB |      <span class="number">0</span>%      Default |</span><br><span class="line">|                                         |                        |                  N/A |</span><br><span class="line">+-----------------------------------------+------------------------+----------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这边可以看到CUDA的版本</p>
<p>到<a href="https://developer.nvidia.com/cuda-downloads%E9%87%8C%E9%9D%A2%E5%8E%BB">https://developer.nvidia.com/cuda-downloads里面去</a></p>
<p><img src="/CUDA-and-pytorch/image-20250219000853416-1740145143701-3.png" alt></p>
<p>然后根据版本选一下，本地跑别乱选<code>network</code></p>
<p>然后点<code>Download</code>就行了</p>
<p><img src="/CUDA-and-pytorch/image-20250219001030527-1740145143701-5.png" alt></p>
<p>下载好的ok就行了，这步只是解压不是安装。</p>
<p>网上看教程说</p>
<p><img src="/CUDA-and-pytorch/image-20250219001140813-1740145143701-6.png" alt></p>
<p>我确实没勾这个，但是我下面的几个选项还是都装了。</p>
<p>安装好之后理论上环境变量是在的，可以先验证一下</p>
<p>在C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8  (你安装的位置，默认是这样)打开终端</p>
<p>按顺序输入</p>
<p><code>cd .\extras\demo_suite</code></p>
<p><code>.\bandwidthTest.exe</code></p>
<p><code>.\deviceQuery.exe</code></p>
<p>回车测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd .\extras\demo_suite</span></span><br><span class="line"><span class="comment"># .\bandwidthTest.exe</span></span><br><span class="line">[<span class="type">CUDA</span> <span class="type">Bandwidth</span> <span class="type">Test</span>] - Starting...</span><br><span class="line">Running on...</span><br><span class="line"></span><br><span class="line"> Device <span class="number">0</span>: NVIDIA GeForce RTX <span class="number">4060</span> Laptop GPU</span><br><span class="line"> Quick Mode</span><br><span class="line"></span><br><span class="line"> Host to Device Bandwidth, <span class="number">1</span> Device(s)</span><br><span class="line"> PINNED Memory Transfers</span><br><span class="line">   Transfer Size (Bytes)        Bandwidth(MB/s)</span><br><span class="line">   <span class="number">33554432</span>                     <span class="number">12883.8</span></span><br><span class="line"></span><br><span class="line"> Device to Host Bandwidth, <span class="number">1</span> Device(s)</span><br><span class="line"> PINNED Memory Transfers</span><br><span class="line">   Transfer Size (Bytes)        Bandwidth(MB/s)</span><br><span class="line">   <span class="number">33554432</span>                     <span class="number">12835.4</span></span><br><span class="line"></span><br><span class="line"> Device to Device Bandwidth, <span class="number">1</span> Device(s)</span><br><span class="line"> PINNED Memory Transfers</span><br><span class="line">   Transfer Size (Bytes)        Bandwidth(MB/s)</span><br><span class="line">   <span class="number">33554432</span>                     <span class="number">196311.5</span></span><br><span class="line"></span><br><span class="line">Result = PASS</span><br><span class="line"></span><br><span class="line">NOTE: The CUDA Samples are not meant <span class="keyword">for</span> performance measurements. Results may vary when GPU Boost is enabled.</span><br><span class="line"><span class="comment"># .\deviceQuery.exe</span></span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.<span class="number">8</span>\extras\demo_suite\deviceQuery.exe Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API)</span><br><span class="line"></span><br><span class="line">Detected <span class="number">1</span> CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device <span class="number">0</span>: <span class="string">&quot;NVIDIA GeForce RTX 4060 Laptop GPU&quot;</span></span><br><span class="line">  CUDA Driver Version / Runtime Version          <span class="number">12.8</span> / <span class="number">12.8</span></span><br><span class="line">  CUDA Capability Major/Minor version number:    <span class="number">8.9</span></span><br><span class="line">  Total amount of global memory:                 <span class="number">8188</span> MBytes (<span class="number">8585216000</span> bytes)</span><br><span class="line">MapSMtoCores <span class="keyword">for</span> SM <span class="number">8.9</span> is undefined.  Default to use <span class="number">128</span> Cores/SM</span><br><span class="line">MapSMtoCores <span class="keyword">for</span> SM <span class="number">8.9</span> is undefined.  Default to use <span class="number">128</span> Cores/SM</span><br><span class="line">  (<span class="number">24</span>) Multiprocessors, (<span class="number">128</span>) CUDA Cores/<span class="built_in">MP</span>:     <span class="number">3072</span> CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            <span class="number">2370</span> MHz (<span class="number">2.37</span> GHz)</span><br><span class="line">  Memory Clock rate:                             <span class="number">8001</span> Mhz</span><br><span class="line">  Memory Bus Width:                              <span class="number">128</span><span class="literal">-bit</span></span><br><span class="line">  L2 Cache Size:                                 <span class="number">33554432</span> bytes</span><br><span class="line">  Maximum Texture Dimension Size (x,y,z)         <span class="number">1</span>D=(<span class="number">131072</span>), <span class="number">2</span>D=(<span class="number">131072</span>, <span class="number">65536</span>), <span class="number">3</span>D=(<span class="number">16384</span>, <span class="number">16384</span>, <span class="number">16384</span>)</span><br><span class="line">  Maximum Layered <span class="number">1</span>D Texture Size, (num) layers  <span class="number">1</span>D=(<span class="number">32768</span>), <span class="number">2048</span> layers</span><br><span class="line">  Maximum Layered <span class="number">2</span>D Texture Size, (num) layers  <span class="number">2</span>D=(<span class="number">32768</span>, <span class="number">32768</span>), <span class="number">2048</span> layers</span><br><span class="line">  Total amount of constant memory:               zu bytes</span><br><span class="line">  Total amount of shared memory per block:       zu bytes</span><br><span class="line">  Total number of registers available per block: <span class="number">65536</span></span><br><span class="line">  Warp size:                                     <span class="number">32</span></span><br><span class="line">  Maximum number of threads per multiprocessor:  <span class="number">1536</span></span><br><span class="line">  Maximum number of threads per block:           <span class="number">1024</span></span><br><span class="line">  Max dimension size of a thread block (x,y,z): (<span class="number">1024</span>, <span class="number">1024</span>, <span class="number">64</span>)</span><br><span class="line">  Max dimension size of a grid size    (x,y,z): (<span class="number">2147483647</span>, <span class="number">65535</span>, <span class="number">65535</span>)</span><br><span class="line">  Maximum memory pitch:                          zu bytes</span><br><span class="line">  Texture alignment:                             zu bytes</span><br><span class="line">  Concurrent <span class="built_in">copy</span> and kernel execution:          Yes with <span class="number">1</span> <span class="built_in">copy</span> engine(s)</span><br><span class="line">  Run time limit on kernels:                     Yes</span><br><span class="line">  Integrated GPU sharing Host Memory:            No</span><br><span class="line">  Support host page<span class="literal">-locked</span> memory mapping:       Yes</span><br><span class="line">  Alignment requirement <span class="keyword">for</span> Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Device supports Compute Preemption:            Yes</span><br><span class="line">  Supports Cooperative Kernel Launch:            Yes</span><br><span class="line">  Supports MultiDevice Co<span class="literal">-op</span> Kernel Launch:      No</span><br><span class="line">  Device PCI Domain ID / Bus ID / location ID:   <span class="number">0</span> / <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">  Compute Mode:</span><br><span class="line">     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = <span class="number">12.8</span>, CUDA Runtime Version = <span class="number">12.8</span>, NumDevs = <span class="number">1</span>, Device0 = NVIDIA GeForce RTX <span class="number">4060</span> Laptop GPU</span><br><span class="line">Result = PASS</span><br></pre></td></tr></table></figure>
<p>如果有这样的就说明成功了</p>
<p>试一下<code>nvcc -V</code></p>
<p><img src="/CUDA-and-pytorch/876ee5e3b3266e2d56bdd5b30a2809cf-1739898997106-5-1740145143702-7.png" alt></p>
<h2 id="step-3-安装pytorch"><a class="markdownIt-Anchor" href="#step-3-安装pytorch"></a> Step 3 安装Pytorch</h2>
<p>这个安装靠的是<code>conda</code>虚拟环境下的<code>pip3</code>安装的完整<code>pytorch</code>,并没有使用<code>docker</code>镜像来部署,不过如果到了需要租显卡的时候，就需要再去学习使用<code>docker</code>来部署了。</p>
<p>先<code>conda activate d2l</code> 激活一下自己的环境  <em>别笨到自己环境名字都没改，当然你也叫d2l那我没意见</em></p>
<p><a href="https://pytorch.org/">PyTorch</a>打开这个网站，</p>
<p><img src="/CUDA-and-pytorch/image-20250219004200322-1740145143702-9.png" alt></p>
<p>选好要下载的，复制好下面这个<code>Run this Command</code></p>
<p>到前面准备好的<code>conda</code>环境去安装</p>
<p><s>需要魔法，否则可能会给你装疯，而且在查阅资料的时候发现用镜像有概率不能识别pytorch，即使你的pytorch是你的pytorch，但是你的pytorch不是你的pytorch</s></p>
<p><img src="/CUDA-and-pytorch/6dbdeed45283dcad3a1c1f91a769f6b3-1740145143702-8.png" alt></p>
<p>报警告不用慌张，不影响使用。如果是这样就安装好了。</p>
<p>下面就测试一下<code>pytorch</code>的使用情况</p>
<p><code>python</code></p>
<p><code>&gt;&gt;&gt; import torch</code></p>
<p>第一次应该会等很久，别乱动就是了</p>
<p><code>&gt;&gt;&gt; torch.cuda.is_available()</code></p>
<p>返回<code>true</code></p>
<p><code>&gt;&gt;&gt; import torch</code></p>
<p><code>&gt;&gt;&gt; torch.cuda.device_count()</code></p>
<p>返回<code>1</code></p>
<p>代表识别到一张显卡</p>
<p>大概就活了。</p>
<p><img src="/CUDA-and-pytorch/28dcd3a09bb512143de46b300b9d95e7-1740145143702-10.png" alt></p>
<p><code>exit()</code>退出去</p>
<p>简单的<code>pytorch</code>就装好了</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Network-Layer</title>
    <url>/Network-Layer/</url>
    <content><![CDATA[<h1 id="network-layer"><a class="markdownIt-Anchor" href="#network-layer"></a> Network Layer</h1>
<blockquote>
<p>网络层是<code>OSI</code>模型中的第三层，它负责在不同网络之间（端到端）提供数据包的路由和转发。网络互联的本质是通过<code>IP</code>协议实现的，而数据传输的基本单元是<code>IP</code>数据报。本章将详细介绍网络层的核心协议与技术。</p>
</blockquote>
<p>网络互连<code>本质</code>是通过<code>ip</code>实现的，<code>传输</code>是以<code>ip数据报</code>为介质。</p>
<h2 id="ip"><a class="markdownIt-Anchor" href="#ip"></a> IP</h2>
<p><code>IP</code>协议是无连接、不可靠的数据报服务。</p>
<ul>
<li><strong>无连接 (<code>Connectionless</code>)</strong>：发送方在发送数据前，不需要与接收方建立连接。每个数据报都是独立传输的，因此到达顺序、完整性都不能保证。</li>
<li><strong>不可靠 (<code>Unreliable</code>)</strong>：<code>IP</code>协议不提供错误恢复或重传机制。如果数据报在传输中丢失或损坏，<code>IP</code>层本身不会处理，而是交由上层协议（如<code>TCP</code>）来确保可靠性。</li>
</ul>
<h3 id="ipv4-数据报格式"><a class="markdownIt-Anchor" href="#ipv4-数据报格式"></a> IPv4 数据报格式</h3>
<p>一个<code>IP</code>数据报由<code>首部 (Header)</code>和<code>数据 (Data)</code>两部分组成。首部通常为20字节，包含了路由和转发所需的所有关键信息。</p>
<ul>
<li><strong>版本 (<code>Version</code>)</strong> (4位): 指示<code>IP</code>协议的版本，对于<code>IPv4</code>，该值为 4。</li>
<li><strong>首部长度 (<code>IHL - Internet Header Length</code>)</strong> (4位): 表示整个<code>IP</code>首部的长度，单位是 <strong>4字节</strong>（32位）。例如，如果该值为5，则首部长度为 5 * 4 = 20 字节。最小值为5（20字节），最大值为15（60字节）。</li>
<li><strong>服务类型 (<code>ToS - Type of Service</code>)</strong> (8位): 用于指定数据报的优先级和服务质量（<code>QoS</code>）要求，例如最小延迟、最大吞吐量等。</li>
<li><strong>总长度 (<code>Total Length</code>)</strong> (16位): 指示整个<code>IP</code>数据报（包括首部和数据）的总长度，单位是字节。最大长度为 <code>65535</code> 字节。</li>
<li><strong>标识 (<code>Identification</code>)</strong> (16位): 该字段唯一标识一个数据报。当数据报因为过大而被分片时，所有分片都将拥有相同的标识号，以便接收方能够将它们重新组装。</li>
<li><strong>标志 (<code>Flags</code>)</strong> (3位):
<ul>
<li>第1位：保留，必须为0。</li>
<li>第2位：<strong><code>DF (Don't Fragment)</code></strong>。如果设为1，则禁止路由器对该数据报进行分片。如果数据报过大而无法通过，路由器将丢弃它并返回一个<code>ICMP</code>错误消息。</li>
<li>第3位：<strong><code>MF (More Fragments)</code></strong>。如果设为1，表示后面还有更多的分片；如果为0，表示这是最后一个分片（或未分片）。</li>
</ul>
</li>
<li><strong>片偏移 (<code>Fragment Offset</code>)</strong> (13位): 指示当前分片在原始数据报中的位置。偏移量以 <strong><code>8字节</code></strong> 为单位。</li>
<li><strong>生存时间 (<code>TTL - Time to Live</code>)</strong> (8位): 设置数据报在网络中可以存活的最大跳数（经过的路由器数）。每经过一个路由器，<code>TTL</code>值减1。当<code>TTL</code>减为0时，路由器将丢弃该数据报，并向源主机发送一个<code>ICMP</code>超时消息。这可以防止数据报在网络中无限循环。</li>
<li><strong>协议 (<code>Protocol</code>)</strong> (8位): 指示<code>IP</code>数据报的数据部分承载的是哪个上层协议。例如，<code>6 </code>代表<code>TCP</code>，<code>17 </code>代表<code>UDP</code>，1 代表<code>ICMP</code>。</li>
<li><strong>首部检验和 (<code>Header Checksum</code>)</strong> (16位): 用于校验<code>IP</code>首部在传输过程中是否出错。它只对首部进行计算，不包括数据部分。</li>
<li><strong>源IP地址 (<code>Source IP Address</code>)</strong> (32位): 发送方设备的<code>IP</code>地址。</li>
<li><strong>目的IP地址 (<code>Destination IP Address</code>)</strong> (32位): 接收方设备的<code>IP</code>地址。</li>
<li><strong>选项 (<code>Options</code>)</strong> (可变长): 用于一些特殊处理，如记录路由、时间戳等。由于选项会增加首部长度并降低处理效率，因此不常用。如果存在，首部长度字段会大于5。</li>
</ul>
<h3 id="ip-分片-fragmentation"><a class="markdownIt-Anchor" href="#ip-分片-fragmentation"></a> IP 分片 (Fragmentation)</h3>
<p>当一个<code>IP</code>数据报的长度超过了链路的<strong>最大传输单元 (<code>MTU</code>)</strong> 时，路由器就需要将其分割成多个更小的数据报，这个过程称为分片。</p>
<ul>
<li>标识、标志和片偏移这三个字段共同协作，以确保分片能够在目的主机被正确地重组。</li>
<li>所有分片共享相同的标识号。</li>
<li>除了最后一个分片，其他所有分片的<code>MF</code>标志位都为1。</li>
<li>片偏移字段记录了每个分片数据在原始数据中的相对位置。</li>
</ul>
<hr>
<h2 id="icmp"><a class="markdownIt-Anchor" href="#icmp"></a> ICMP</h2>
<p><strong>ICMP</strong>：<code>Internet Control Message Protocol</code> ，因特网控制报文协议</p>
<p>方向：主机/路由器 -&gt; 源站(发送方)</p>
<p><img src="/Network-Layer/54070be665d2466175453f2c7153900f-1740404253149-1.jpeg" alt></p>
<p><code>代码</code> 提供了进一步的描述信息，在此不进一步提供描述信息，<s>即代码的代码（？</s>。</p>
<hr>
<p><strong>However</strong>, 首先想区分一下这边的四个字节vs图上的内容vs十六进制和二进制</p>
<p>图上的<code>0  8  16  31</code>一共有32位，指的是二进制的32位，这个<code>类型</code>是1字节，2个16进制。也就是在读数据报的时候你看到的是两个十六进制的字符。<s>然而图上很喜欢使用二进制长度来表示</s></p>
<p><code>8位二进制</code>=<code>2位十六进制</code>=<code>1字节</code></p>
<hr>
<table>
<thead>
<tr>
<th>类型字段</th>
<th>ICMP报文类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>回显应答 Echo Reply</td>
</tr>
<tr>
<td>3</td>
<td>目的不可达 Destination Unreachable</td>
</tr>
<tr>
<td>4</td>
<td>源抑制 Source Quench</td>
</tr>
<tr>
<td>5</td>
<td>路由重定向 Redirect (change a route)</td>
</tr>
<tr>
<td>8</td>
<td>回显请求 Echo Request</td>
</tr>
<tr>
<td>9</td>
<td>路由器广告 Router Advertisement</td>
</tr>
<tr>
<td>10</td>
<td>路由器请求 Router Solicitation</td>
</tr>
<tr>
<td>11</td>
<td>数据报超时 Time Exceeded for a Datagram</td>
</tr>
<tr>
<td>12</td>
<td>数据报参数问题 Parameter Problem on a Datagram</td>
</tr>
<tr>
<td>13</td>
<td>时间戳请求 Timestamp Request</td>
</tr>
<tr>
<td>14</td>
<td>时间戳应答 Timestamp Reply</td>
</tr>
<tr>
<td>15</td>
<td>信息请求（废弃） Information Request (obsolete)</td>
</tr>
<tr>
<td>16</td>
<td>信息应答（废弃） Information Reply (obsolete)</td>
</tr>
<tr>
<td>17</td>
<td>地址掩码请求 Address Mask Request</td>
</tr>
<tr>
<td>18</td>
<td>地址掩码应答 Address Mask Reply</td>
</tr>
</tbody>
</table>
<p><code>ICMP</code> 报文分为两大类</p>
<p><code>差错报告报文</code>和<code>提供信息的报文(询问报文)</code></p>
<ul>
<li>
<p>差错报告报文 (<code>Error Report Messages</code>)</p>
<ul>
<li>
<p><code>3</code> 目的不可达 <code>Destination Unreachable</code></p>
</li>
<li>
<p><code>4</code> 源抑制 <code>Source Quench</code></p>
</li>
<li>
<p><code>5</code> 路由重定向 <code>Redirect (change a route)</code></p>
</li>
<li>
<p><code>11</code> 数据报超时 <code>Time Exceeded for a Datagram</code></p>
</li>
<li>
<p><code>12</code> 数据报参数问题 <code>Parameter Problem on a Datagram</code></p>
</li>
</ul>
</li>
<li>
<p>提供信息的报文 (询问报文) (<code>Information Request/Inquiry Messages</code>)</p>
<ul>
<li>
<p><code>0</code> 回显应答 <code>Echo Reply</code></p>
</li>
<li>
<p><code>8</code> 回显请求 <code>Echo Request</code></p>
</li>
<li>
<p><code>9</code> 路由器广告 <code>Router Advertisement</code></p>
</li>
<li>
<p><code>10</code> 路由器请求 <code>Router Solicitation</code></p>
</li>
<li>
<p><code>13</code> 时间戳请求 <code>Timestamp Request</code></p>
</li>
<li>
<p><code>14</code> 时间戳应答 <code>Timestamp Reply</code></p>
</li>
<li>
<p><code>17</code> 地址掩码请求 <code>Address Mask Request</code></p>
</li>
<li>
<p><code>18</code> 地址掩码应答 <code>Address Mask Reply</code></p>
</li>
</ul>
</li>
</ul>
<p>其中<code>3</code>、<code>11</code>、<code>0</code>、<code>8</code>常用</p>
<p><code>3</code>、<code>11</code>是<code>差错报告报文</code></p>
<p><code>0</code>、<code>8</code>是<code>提供信息的报文</code></p>
<h3 id="几种常用icmp报文类型"><a class="markdownIt-Anchor" href="#几种常用icmp报文类型"></a> 几种常用ICMP报文类型</h3>
<h4 id="目的不可达报文3"><a class="markdownIt-Anchor" href="#目的不可达报文3"></a> 目的不可达报文（3）</h4>
<p>顾名思义，<code>目的不可达报文</code>就是目的不可达，<code>代码</code>部分进一步阐述</p>
<p><img src="/Network-Layer/eaba7cf385281339afc9f7083d44ea17-1740404253149-2.jpeg" alt></p>
<p>相当于<code>代码</code>那块就是<code>00</code>,<code>01</code>…这样的十六进制</p>
<blockquote>
<p><code>MTU</code>是指一个网络接口上能够传输的最大数据包大小。</p>
<p><code>路径最小MTU</code>影响数据在网络中的传输，尤其在路径中包含不同的网络设备时，如果路径中的任何设备不能处理过大的数据包，它就会丢弃该数据包或将其分片。</p>
<p>所以<code>“路径最小MTU发现”应用</code>可以实现 <code> MTU</code>探测 和 避免分片</p>
</blockquote>
<h4 id="超时报文11"><a class="markdownIt-Anchor" href="#超时报文11"></a> 超时报文（11）</h4>
<p><code>代码</code>说明超时的性质：</p>
<p><code>00</code>  传输过程中IP <code>TTL（time to live）</code>超时</p>
<p><code>01</code>   分片重装超时</p>
<blockquote>
<p>TTL超时可用于实现路由跟踪（<code>tracert</code>）</p>
<p><em>路由跟踪的工作原理总结：</em></p>
<ul>
<li>路由跟踪工具利用<code>TTL</code>字段逐步发送数据包，每次增加<code>TTL</code>值以遍历路径。</li>
<li>每经过一个路由器，<code>TTL</code>值会减1，直到数据包的<code>TTL</code>变为0，路由器丢弃数据包并返回一个<code>ICMP</code>“时间超时”消息。</li>
<li>通过收集每个中间路由器的回应，路由跟踪工具能够显示整个路径以及每跳的延迟。</li>
</ul>
</blockquote>
<p><img src="/Network-Layer/4c779b318b1952f5114d3ac31802c576_720-1740404253150-3.jpg" alt></p>
<h4 id="回应请求与应答报文-类型-8-和-0"><a class="markdownIt-Anchor" href="#回应请求与应答报文-类型-8-和-0"></a> <strong>回应请求与应答报文 (类型 8 和 0)</strong></h4>
<p>这是我们最熟悉的<code>ping</code>命令所使用的报文。</p>
<ul>
<li><strong>PING (<code>Packet InterNet Groper</code>)</strong>：用于测试两台主机之间的连通性。</li>
<li>主机A向主机B发送一个<code>ICMP</code>回显请求报文（类型8）。</li>
<li>如果主机B接收到该报文，它会回复一个<code>ICMP</code>回显应答报文（类型0）。</li>
<li><code>ping</code>是一个应用层程序直接使用网络层<code>ICMP</code>的典型例子，它绕过了传输层的<code>TCP</code>或<code>UDP</code>。</li>
</ul>
<hr>
<h2 id="arp-address-resolution-protocol"><a class="markdownIt-Anchor" href="#arp-address-resolution-protocol"></a> ARP (Address Resolution Protocol)</h2>
<p>在任何局域网（如以太网）中，数据帧的传输最终依赖的是<strong>MAC地址（物理地址）</strong>，而不是<code>IP</code>地址。那么，当一台主机（例如 <code>192.168.1.100</code>）想要与同一网络中的另一台主机（例如 <code>192.168.1.50</code>）通信时，它如何知道对方的<code>MAC</code>地址呢？这就是<code>ARP</code>协议的作用。</p>
<p><strong>定义</strong>：<code>ARP (Address Resolution Protocol)</code>，地址解析协议。它负责将一个已知的<code>IP</code>地址（网络层地址）解析（映射）为对应的MAC地址（数据链路层地址）。</p>
<p><strong>工作流程</strong>：</p>
<ol>
<li><strong>检查<code>ARP</code>缓存</strong>：主机 A 首先会检查自己的 <strong><code>ARP</code>缓存表</strong>，看是否已经有目标<code>IP</code>地址 <code>192.168.1.50</code> 对应的<code>MAC</code>地址记录。如果存在，则直接使用该<code>MAC</code>地址封装数据帧并发送。</li>
<li><strong>发送<code>ARP</code>请求</strong>：如果在缓存中找不到记录，主机 A 会在局域网内广播一个 <strong><code>ARP</code>请求</strong> 报文。这个报文的核心内容是：“<strong>谁的<code>IP</code>地址是 192.168.1.50？请把你的<code>MAC</code>地址告诉我。</strong>” 这个请求是广播的，意味着网络内所有设备都会收到它。</li>
<li><strong>单播<code>ARP</code>响应</strong>：网络中的所有设备都会解析这个<code>ARP</code>请求。但只有<code>IP</code>地址为 <code>192.168.1.50</code> 的主机 B 会响应。主机 B 会直接向主机 A 发送一个 <strong><code>ARP</code>响应</strong> 报文（单播），内容是：“<strong>我的<code>IP</code>地址是 <code>192.168.1.50</code>，我的<code>MAC</code>地址是<code> XX:XX:XX:XX:XX:XX</code>。</strong>”</li>
<li><strong>更新<code>ARP</code>缓存</strong>：主机 A 收到响应后，就知道了主机 B 的<code>MAC</code>地址，并将这个映射关系（<code>IP -&gt; MAC</code>）存入自己的<code>ARP</code>缓存表中，以备后续使用。然后，它就可以将数据发送给主机 B 了。</li>
</ol>
<p><strong><code>ARP</code>缓存</strong>：每个主机都维护一个ARP缓存，用于存储近期解析过的<code>IP</code>地址与<code>MAC</code>地址的对应关系。缓存条目有生命周期（通常是几分钟），过期后会被删除，以确保信息的时效性。</p>
<hr>
<h2 id="dhcp-dynamic-host-configuration-protocol"><a class="markdownIt-Anchor" href="#dhcp-dynamic-host-configuration-protocol"></a> DHCP (Dynamic Host Configuration Protocol)</h2>
<p>当一台新设备（如笔记本电脑或手机）接入网络时，它需要一个<code>IP</code>地址才能通信。手动为每台设备配置IP地址、子网掩码、默认网关和<code>DNS</code>服务器是非常繁琐且容易出错的。<code>DHCP</code>协议就是为了自动化这个过程而设计的。</p>
<p><strong>定义</strong>：<strong>动态主机配置协议 (<code>DHCP, Dynamic Host Configuration Protocol</code>)</strong> 是一个应用层协议（基于<code>UDP</code>），允许网络中的<code>DHCP</code>服务器自动地为客户端分配IP地址及其他网络配置参数。</p>
<p><strong>工作流程 (<code>DORA</code>)</strong>：这个过程通常被称为**<code>DORA</code>**，代表四个核心步骤。</p>
<ol>
<li><strong><code>Discover</code> (发现)</strong>：客户端（新设备）在网络中<strong>广播</strong>一个 <strong><code>DHCP Discover</code></strong> 报文，试图找到可用的<code>DHCP</code>服务器。报文大意是：“<strong>我需要一个<code>IP</code>地址，网络里有<code>DHCP</code>服务器吗？</strong>”</li>
<li><strong><code>Offer</code> (提供)</strong>：所有收到<code>Discover</code>报文的<code>DHCP</code>服务器都会从自己的地址池中选择一个可用的<code>IP</code>地址，并通过一个 <strong><code>DHCP Offer</code></strong> 报文（单播或广播）提供给客户端。报文大意是：“<strong>你好，我这里有一个<code>IP</code>地址 <code>192.168.1.123</code> 可以给你用，同时还有这些其他的配置信息。</strong>”</li>
<li><strong><code>Request (请求)</code></strong>：客户端可能会收到多个<code>Offer</code>。它会选择其中一个（通常是第一个收到的），然后<strong>广播</strong>一个 <strong><code>DHCP Request</code></strong> 报文，正式请求使用这个<code>IP</code>地址。广播的目的是通知所有<code>DHCP</code>服务器（包括那些也提供了Offer的服务器），它已经做出了选择。报文大意是：“<strong>各位，我决定使用服务器X提供的<code>IP</code>地址 <code>192.168.1.123</code>。</strong>”</li>
<li><strong><code>Acknowledge (确认)</code></strong>：被选中的<code>DHCP</code>服务器会发送一个 <strong><code>DHCP ACK</code></strong> 报文，确认将该<code>IP</code>地址租借给客户端，并规定了租期。此时，客户端就可以使用这个IP地址进行网络通信了。</li>
</ol>
<hr>
<h2 id="路由协议-routing-protocols"><a class="markdownIt-Anchor" href="#路由协议-routing-protocols"></a> 路由协议 (Routing Protocols)</h2>
<p>IP协议本身只负责数据报的转发，但它并不知道如何选择最佳路径。<strong>路由器</strong>通过运行<strong>路由协议</strong>来学习网络的拓扑结构，并创建<strong>路由表</strong>，从而做出智能的路径选择决策。路由协议主要分为两大类：</p>
<h3 id="内部网关协议-igp-interior-gateway-protocol"><a class="markdownIt-Anchor" href="#内部网关协议-igp-interior-gateway-protocol"></a> 内部网关协议 (IGP - Interior Gateway Protocol)</h3>
<p>IGP在一个<strong>自治系统 (<code>AS - Autonomous System</code>)</strong> 内部交换路由信息。一个<code>AS</code>可以是一个公司、一所大学或一个互联网服务提供商（<code>ISP</code>）的网络。</p>
<ul>
<li><strong>RIP (<code>Routing Information Protocol</code>)</strong>
<ul>
<li><strong>类型</strong>：距离矢量协议 (<code>Distance-Vector</code>)。</li>
<li><strong>工作原理</strong>：RIP路由器周期性地与邻居交换整个路由表。它使用“<strong>跳数 (<code>Hop Count</code>)</strong>”作为度量值来衡量路径的好坏，即经过的路由器数量越少，路径越优。</li>
<li><strong>特点</strong>：实现简单，但有明显缺点，如最大跳数限制（15跳）、收敛速度慢、容易产生路由环路等。现在已基本被<code>OSPF</code>取代。</li>
</ul>
</li>
<li><strong>OSPF (<code>Open Shortest Path First</code>)</strong>
<ul>
<li><strong>类型</strong>：链路状态协议 (<code>Link-State</code>)。</li>
<li><strong>工作原理</strong>：<code>OSPF</code>路由器不交换路由表，而是交换<strong>链路状态通告 (<code>LSA</code>)</strong>。每个路由器都收集网络中所有的<code>LSA</code>，从而在本地构建一个完整的网络拓扑图。然后，它使用**<code>Dijkstra</code>算法**计算出到达每个目的地的最短路径。</li>
<li><strong>特点</strong>：收敛速度快，无路由环路，支持可变长子网掩码（<code>VLSM</code>），支持区域划分以实现更好的扩展性。是当今企业网络中最主流的<code>IGP</code>协议。</li>
</ul>
</li>
</ul>
<h3 id="外部网关协议-egp-exterior-gateway-protocol"><a class="markdownIt-Anchor" href="#外部网关协议-egp-exterior-gateway-protocol"></a> 外部网关协议 (EGP - Exterior Gateway Protocol)</h3>
<p><code>EGP</code>用于在不同的自治系统（<code>AS</code>）之间交换路由信息，是构成整个互联网的骨架。</p>
<ul>
<li><strong>BGP (<code>Border Gateway Protocol</code>)</strong>
<ul>
<li><strong>定义</strong>：边界网关协议是目前唯一在使用的<code>EGP</code>。它不仅仅是寻找最短路径，更重要的是，它是一个“<strong>路径矢量协议</strong>”，能够根据管理员设定的策略（如费用、安全、政治因素等）来选择最佳路由。</li>
<li><strong>特点</strong>：极其稳定和可扩展，是互联网的核心路由协议，负责连接全球成千上万个自治系统。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h2>
<p>随着物联网的兴起和互联网的蓬勃发展，<code>IPv4</code>的地址空间（约43亿个）已完全耗尽。<code>IPv6</code>作为其继任者，提供了海量的地址空间和诸多改进。</p>
<p><strong>主要优势</strong>：</p>
<ol>
<li><strong>巨大的地址空间</strong>：<code>IPv6</code>使用128位地址，理论上可提供<code> 2^128</code> 个地址，这个数字足以满足未来数百年内任何可以想象到的需求。</li>
<li><strong>简化的首部格式</strong>：<code>IPv6</code>的首部是固定的40字节，移除了<code>IPv4</code>中不常用或冗余的字段（如<code>IHL</code>、标识、标志、片偏移、首部检验和），使得路由器处理数据包的效率更高。</li>
<li><strong>不再由路由器分片</strong>：<code>IPv6</code>要求发送方主机在发送前完成“路径<code>MTU</code>发现”（<code>PMTUD</code>），确保数据包大小不超过路径中的最小<code>MTU</code>。路由器不再进行分片，大大减轻了路由器的负担。</li>
<li><strong>增强的安全性</strong>：<code>IPsec</code>（IP安全协议）被设计为<code>IPv6</code>的强制组成部分（尽管后来变为可选），为网络层提供了端到端的加密和认证，安全性远超<code>IPv4</code>。</li>
<li><strong>支持无状态地址自动配置 (<code>SLAAC</code>)</strong>：<code>IPv6</code>主机可以根据路由器通告的前缀和自身的<code>MAC</code>地址等信息，自动生成全局唯一的<code>IP</code>地址，无需<code>DHCP</code>服务器介入即可上网。</li>
<li><strong>改进的邻居发现协议 (<code>NDP</code>)</strong>：<code>IPv6</code>使用<strong>邻居发现协议 (<code>NDP</code>)</strong>，它基于<code>ICMPv6</code>，取代了<code>IPv4</code>中的<code>ARP</code>和<code>ICMP</code>路由器发现等功能，实现了地址解析、路由器发现、重复地址检测（<code>DAD</code>）等，更加高效和强大。</li>
</ol>
<hr>
<h2 id="igmp-internet-group-management-protocol"><a class="markdownIt-Anchor" href="#igmp-internet-group-management-protocol"></a> IGMP (Internet Group Management Protocol)</h2>
<p>当数据需要发送给一组特定的、感兴趣的主机而不是单个主机（单播）或所有主机（广播）时，就需要<strong>组播 (<code>Multicast</code>)</strong>。<code>IGMP</code>协议就是用于管理这种组播组成员关系的。</p>
<p><strong>定义</strong>：IGMP (<code>Internet Group Management Protocol</code>)，因特网组管理协议。它允许主机通知其本地路由器，表示自己希望加入或离开某个特定的组播组。</p>
<p><strong>工作原理</strong>：</p>
<ul>
<li><strong>加入组</strong>：当一个主机上的某个应用希望接收特定组播组（例如一个视频流）的数据时，主机会向其本地路由器发送一个<code>IGMP</code><strong>成员关系报告</strong>报文。</li>
<li><strong>维护关系</strong>：路由器会周期性地发送<code>IGMP</code><strong>查询</strong>报文，询问本地网络上是否还有成员对某个组播组感兴趣。仍在组内的成员会回复报告报文。</li>
<li><strong>离开组</strong>：当主机不再希望接收数据时，它会发送一个<code>IGMP</code><strong>离开组</strong>报文。</li>
</ul>
<p><code>IGMP</code>只负责在主机和本地路由器之间进行通信。路由器之间则需要运行专门的组播路由协议（如<code>PIM</code>）来构建组播数据的分发路径。</p>
<hr>
<h2 id="nat-network-address-translation"><a class="markdownIt-Anchor" href="#nat-network-address-translation"></a> NAT (Network Address Translation)</h2>
<p><code>NAT</code>是为了延缓<code>IPv4</code>地址耗尽而设计出的一种关键技术。它允许一个机构内部的众多计算机使用<strong>私有<code>IP</code>地址</strong>上网，但在与外部互联网通信时，共享一个或少数几个<strong>公有<code>IP</code>地址</strong>。</p>
<p><strong>定义</strong>：<strong>网络地址转换 (<code>NAT</code>)</strong> 工作在路由器或防火墙上，负责在私有网络和公有网络之间转换<code>IP</code>数据报的源/目的地址和端口号。</p>
<p><strong>私有<code>IP</code>地址段</strong> (不会在公网路由):</p>
<ul>
<li><code>10.0.0.0</code> 到 <code>10.255.255.255</code> (A类)</li>
<li><code>172.16.0.0</code> 到 <code>172.31.255.255</code> (B类)</li>
<li><code>192.168.0.0</code> 到 <code>192.168.255.255</code> (C类)</li>
</ul>
<p><strong>工作原理与类型</strong>：</p>
<ol>
<li><strong>静态NAT (<code>Static NAT</code>)</strong>：
<ul>
<li>将一个私有<code>IP</code>地址<strong>一对一</strong>地映射到一个公有IP地址。</li>
<li>主要用于内部服务器（如Web服务器）需要被外部网络稳定访问的场景。</li>
</ul>
</li>
<li><strong>动态NAT (<code>Dynamic NAT</code>)</strong>：
<ul>
<li>维护一个公有<code>IP</code>地址池。当内部主机需要访问互联网时，从地址池中<strong>临时分配</strong>一个未使用的公有<code>IP</code>地址给它。</li>
<li>当通信结束时，该公有<code>IP</code>地址被回收，可供其他主机使用。</li>
</ul>
</li>
<li><strong>PAT (<code>Port Address Translation</code>) / NAPT</strong>：
<ul>
<li>这是目前<strong>最常用</strong>的<code>NAT</code>形式，也称为<code>NAPT</code>（网络地址端口转换）。它将多个私有<code>IP</code>地址映射到<strong>同一个公有IP地址</strong>的不同<strong>端口</strong>上。</li>
<li><strong>流程</strong>：当内部主机 <code>192.168.1.100 </code>使用端口 <code>50000 </code>访问外部服务器时，<code>NAT</code>路由器会将源地址和端口转换为 (公有IP, 新端口号)，例如 (<code>202.100.1.1</code>, <code>60001</code>)，并记录这个映射关系。当外部服务器响应数据到 (<code>202.100.1.1</code>, <code>60001</code>) 时，路由器根据记录将数据包的目的地址和端口改回 (<code>192.168.1.100</code>, <code>50000</code>)，并发送给内部主机。</li>
<li><strong>优点</strong>：极大地节约了公有<code>IP</code>地址，仅用一个公有<code>IP</code>就能让成百上千台设备同时上网。</li>
<li><strong>缺点</strong>：破坏了端到端的连接模型，可能导致某些<code>P2P</code>应用或<code>VoIP</code>协议出现问题。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="ipsec-internet-protocol-security"><a class="markdownIt-Anchor" href="#ipsec-internet-protocol-security"></a> IPsec (Internet Protocol Security)</h2>
<p><strong><code>IPsec</code></strong> 是一套协议簇，用于在网络层为<code>IP</code>通信提供高质量、可互操作的、基于密码学的安全保障。它能提供数据来源认证、数据完整性、数据机密性（加密）和防重放攻击等服务，是构建**<code>VPN</code> (虚拟专用网络)** 的核心技术。</p>
<p><strong>两种工作模式</strong>：</p>
<ol>
<li><strong>传输模式 (<code>Transport Mode</code>)</strong>：
<ul>
<li><strong>工作方式</strong>：只对IP数据报的<strong>数据部分（<code>Payload</code>）</strong> 进行加密或认证。原始的IP头部保持不变，只插入了<code>IPsec</code>头部。</li>
<li><strong>用途</strong>：主要用于两台主机之间的<strong>端到端</strong>安全通信。</li>
</ul>
</li>
<li><strong>隧道模式 (<code>Tunnel Mode</code>)</strong>：
<ul>
<li><strong>工作方式</strong>：将<strong>整个原始<code>IP</code>数据报（包括头部和数据）</strong> 都进行加密和认证，然后将其封装在一个新的IP数据报中。</li>
<li><strong>用途</strong>：主要用于两个网络（如公司总部和分部）之间的<strong>网关到网关</strong>安全通信，由网络边缘的<code>VPN</code>网关来处理。这是构建<code>VPN</code>最常见的方式。</li>
</ul>
</li>
</ol>
<p><strong>核心协议</strong>：</p>
<ul>
<li><strong>AH (<code>Authentication Header</code>)</strong>：只提供<strong>数据完整性</strong>和<strong>身份验证</strong>，但不提供加密。它确保数据在传输中未被篡改，但传输内容是明文的。</li>
<li><strong>ESP (<code>Encapsulating Security Payload</code>)</strong>：提供<strong>数据完整性</strong>、<strong>身份验证</strong>和<strong>数据机密性（加密）</strong>。这是目前应用最广泛的IPsec协议。</li>
</ul>
<hr>
<h2 id="vrrp-virtual-router-redundancy-protocol"><a class="markdownIt-Anchor" href="#vrrp-virtual-router-redundancy-protocol"></a> VRRP (Virtual Router Redundancy Protocol)</h2>
<p>在局域网中，如果作为默认网关的路由器发生故障，整个网络的主机将无法访问外部网络，这形成了一个<strong>单点故障</strong>。<code>VRRP</code>就是为了解决这个问题而设计的网关冗余协议。</p>
<p><strong>定义</strong>：<strong>虚拟路由器冗余协议 (<code>VRRP</code>)</strong> 是一种容错协议，可以将多台物理路由器组织成一个“<strong>虚拟路由器</strong>”，从而对外提供一个高可用的默认网关。</p>
<p><strong>工作原理</strong>：</p>
<ol>
<li><strong>虚拟路由器</strong>：在一个<code>VRRP</code>组中，多台物理路由器共享一个<strong>虚拟<code>IP</code>地址</strong>和<strong>虚拟<code>MAC</code>地址</strong>。网络中的所有客户端都将这个虚拟<code>IP</code>地址配置为它们的默认网关。</li>
<li><strong><code>Master</code>和<code>Backup</code></strong>：在任何时刻，<code>VRRP</code>组中只有一台路由器处于 <strong><code>Master </code>(主)</strong> 状态，它实际拥有虚拟IP地址并负责转发数据包。组内其他路由器则处于 <strong><code>Backup</code> (备)</strong> 状态。</li>
<li><strong>心跳检测</strong>：<code>Master</code>路由器会周期性地发送<code>VRRP</code>通告报文（心跳），向<code>Backup</code>路由器宣告自己处于活动状态。</li>
<li><strong>故障切换</strong>：如果<code>Backup</code>路由器在一定时间内没有收到<code>Master</code>的心跳报文，它会认为<code>Master</code>已经出现故障。此时，优先级最高的<code>Backup</code>路由器会自动切换为新的<code>Master</code>，接管虚拟<code>IP</code>地址和<code>MAC</code>地址，并开始转发数据。</li>
<li><strong>无缝切换</strong>：这个切换过程对客户端是完全透明的，客户端无需进行任何更改，从而保证了网络连接的连续性。</li>
</ol>
<hr>
<h2 id="mpls-multiprotocol-label-switching"><a class="markdownIt-Anchor" href="#mpls-multiprotocol-label-switching"></a> MPLS (Multiprotocol Label Switching)</h2>
<p><code>MPLS</code>是一种高性能的电信级网络技术，它在传统的IP路由（第三层）和数据链路层交换（第二层）之间工作，常被称为“<strong>2.5层</strong>”技术。</p>
<p><strong>定义</strong>：<strong>多协议标签交换 (<code>MPLS</code>)</strong> 通过给数据包预先分配简短、固定长度的“<strong>标签（<code>Label</code>）</strong>”，并根据标签进行转发，而不是像传统路由那样在每一跳都查找复杂的IP路由表。</p>
<p><strong>工作原理</strong>：</p>
<ol>
<li><strong>标签分发</strong>：<code>MPLS</code>网络中的路由器（称为<code>LSR</code> - 标签交换路由器）会通过<code>LDP</code>（标签分发协议）等协议，预先为网络中的IP前缀（路由）建立标签映射关系，形成<strong>标签转发信息库 (<code>LFIB</code>)</strong>。</li>
<li><strong>入口打标 (<code>Push</code>)</strong>：当一个IP数据包进入<code>MPLS</code>网络时，入口路由器（<code>Ingress LER</code>）会进行一次常规的<code>IP</code>路由查找，然后给这个数据包压入一个或多个<code>MPLS</code>标签，形成一个带标签的数据包。</li>
<li><strong>标签交换 (<code>Swap</code>)</strong>：在<code>MPLS</code>网络内部，核心的<code>LSR</code>路由器不再查看<code>IP</code>头部。它们只需读取最外层的标签，在<code>LFIB</code>中进行极速查找，然后“交换”（替换）标签，并将数据包转发到下一个<code>LSR</code>。</li>
<li><strong>出口弹标 (<code>Pop</code>)</strong>：当数据包到达<code>MPLS</code>网络的出口路由器（<code>Egress LER</code>）时，标签被移除（弹出），恢复成原始的<code>IP</code>数据包，然后继续进行标准的<code>IP</code>转发。</li>
</ol>
<p><strong>主要优势</strong>：</p>
<ul>
<li><strong>高速转发</strong>：基于标签的精确匹配交换比基于<code>IP</code>地址的最长前缀匹配查找要快得多。</li>
<li><strong>流量工程 (<code>Traffic Engineering</code>)</strong>：<code>MPLS</code>可以预先设定数据流的路径（建立<code>LSP</code> - 标签交换路径），而不必完全遵循<code>IGP</code>计算出的最短路径。这使得网络管理员可以精细地控制流量，以优化带宽利用率或绕过拥塞点。</li>
<li><strong>VPN支持</strong>：<code>MPLS</code>是构建大规模、高性能<code>VPN</code>（特别是<code>MPLS</code> <code>L3VPN</code>）的基础技术，被全球各大<code>ISP</code>广泛采用。</li>
</ul>
<p>仍在咕咕咕中</p>
]]></content>
      <categories>
        <category>Computer Networks</category>
      </categories>
      <tags>
        <tag>Computer Networks</tag>
      </tags>
  </entry>
  <entry>
    <title>My-Fedora-Journey</title>
    <url>/My-Fedora-Journey/</url>
    <content><![CDATA[<blockquote>
<p>冷知识:</p>
<ul>
<li>F2是翼龙开bios的按键</li>
<li>fedora是rpm系，可以直接用dnf install xxx.rpm</li>
<li>fedora不是arch</li>
</ul>
</blockquote>
<h2 id="desktopkde-plasmastop-using-gnome"><a class="markdownIt-Anchor" href="#desktopkde-plasmastop-using-gnome"></a> Desktop(KDE plasma)::stop using GNOME!</h2>
<p>前端本来用的是默认的<code>GNOME</code>，因为没有桌面很难受所以换成了<code>KDE plasma</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install @kde-desktop-environment</span></span><br></pre></td></tr></table></figure>
<p>后面可以在登录页面切换桌面前端</p>
<h2 id="bootrefinduefi-boot-manager"><a class="markdownIt-Anchor" href="#bootrefinduefi-boot-manager"></a> Boot(rEFInd)::UEFI Boot Manager</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install rEFInd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> refind-install</span></span><br><span class="line">ShimSource is none</span><br><span class="line">Installing rEFInd on Linux....</span><br><span class="line">ESP was found at /boot/efi using vfat</span><br><span class="line"></span><br><span class="line">CAUTION: Your computer appears to be booted with Secure Boot, but you haven&#x27;t</span><br><span class="line">specified a valid shim.efi file source. Chances are you should re-run with</span><br><span class="line">the --shim option. You can read more about this topic at</span><br><span class="line">http://www.rodsbooks.com/refind/secureboot.html.</span><br><span class="line"></span><br><span class="line">Do you want to proceed with installation (Y/N)? n</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这看出来问题了，脚本并不能自主识别本地efi在哪个地方<br>
因此使用了<code>sudo refind-install --shim /boot/efi/EFI/fedora/shimx64.efi</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> refind-install --shim /boot/efi/EFI/fedora/shimx64.efi</span></span><br><span class="line">ShimSource is /boot/efi/EFI/fedora/shimx64.efi</span><br><span class="line">Installing rEFInd on Linux....</span><br><span class="line">ESP was found at /boot/efi using vfat</span><br><span class="line">Installing driver for ext4 (ext4_x64.efi)</span><br><span class="line">Storing copies of rEFInd Secure Boot public keys in //etc/refind.d/keys</span><br><span class="line">Copied rEFInd binary files</span><br><span class="line"></span><br><span class="line">Copying sample configuration file as refind.conf; edit this file to configure</span><br><span class="line">rEFInd.</span><br><span class="line"></span><br><span class="line">Creating new NVRAM entry</span><br><span class="line">rEFInd is set as the default boot manager.</span><br><span class="line">Creating //boot/refind_linux.conf; edit it to adjust kernel options.</span><br><span class="line">The appropriate Secure Boot key is already enrolled.</span><br><span class="line"></span><br><span class="line">Installation has completed successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这边看起来说都弄好了，结果我到MoK那边去找的时候傻眼了，发现这个keys目录是空的啊！<br>
折腾死了，最后还是选择关掉了<code>Secure Boot</code><br>
目前配置仍有问题，自动的识别会多出来很多的启动项<br>
不过确实可以自动扫到windows和fedora,能统一启动是事实，但目前体验感不好</p>
<p>使用的主题是<br>
<a href="https://github.com/catppuccin/refind">GitHub - catppuccin/refind: 🔄 Soothing pastel theme for rEFInd</a></p>
<h2 id="systemfedoramaybe-u-should-know-something-about-this"><a class="markdownIt-Anchor" href="#systemfedoramaybe-u-should-know-something-about-this"></a> System(fedora)::maybe U should know something about this</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf update</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf autoremove    <span class="comment"># 删除孤立的依赖包</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf clean all    <span class="comment"># 清理 DNF 缓存</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> journalctl --vacuum-time=2weeks   <span class="comment"># 仅保留两周日志</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flatpak uninstall --unused  <span class="comment"># flatpak 不使用的包</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -sh ~/.cache</span></span><br><span class="line">6.2G    /home/s3loy/.cache</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -rf ~/.cache/*</span></span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] To be continued</li>
</ul>
<h2 id="toolneofetchshow-your-os"><a class="markdownIt-Anchor" href="#toolneofetchshow-your-os"></a> Tool(neofetch)::Show your OS</h2>
<p><code>fedora</code>的官方仓库里面是没有neofetch的，但是可以<br>
<code>sudo dnf install fastfetch</code><br>
作为替代<br>
但是官方其实也有给出解决方案<br>
<a href="https://github.com/dylanaraps/neofetch/wiki/Installation#fedora--rhel--centos--mageia--openmandriva">Installation · dylanaraps/neofetch Wiki · GitHub</a></p>
<h2 id="toolbleachbitrubbish-sorting"><a class="markdownIt-Anchor" href="#toolbleachbitrubbish-sorting"></a> Tool(bleachbit)::Rubbish Sorting</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install bleachbit</span></span><br></pre></td></tr></table></figure>
<h2 id="gaminggamemodegames-optimize"><a class="markdownIt-Anchor" href="#gaminggamemodegames-optimize"></a> Gaming(gamemode)::Games optimize</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install gamemode</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl --user <span class="built_in">enable</span> gamemoded.service &amp;&amp; systemctl --user start gamemoded.service</span></span><br></pre></td></tr></table></figure>
<h2 id="sideloadinglegacy-ios-kit"><a class="markdownIt-Anchor" href="#sideloadinglegacy-ios-kit"></a> Sideloading(legacy-ios-kit)</h2>
<p><a href="https://github.com/LukeZGD/Legacy-iOS-Kit">GitHub - LukeZGD/Legacy-iOS-Kit: An all-in-one tool to restore/downgrade, save SHSH blobs, jailbreak legacy iOS devices, and more</a></p>
<p>目前还没有使用过，但看起来是一个很好的侧载方案</p>
<h2 id="toolfcitx5input-method"><a class="markdownIt-Anchor" href="#toolfcitx5input-method"></a> Tool(Fcitx5)::Input method</h2>
<p>一开始使用了<code>IBus</code><br>
其中碰到的问题例如Obsidian不能使用中文输入法<br>
在启动命令行参数里面添加了<br>
<code>--enable-features=UseOzonePlatform --ozone-platform=wayland --enable-wayland-ime</code><br>
但是修改之后qq又不能输入了<br>
然后又换回了<code>Fcitx</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt</span></span><br></pre></td></tr></table></figure>
<p>看有推荐使用Fcitx5 rime的，还没进行尝试</p>
<p>使用主题：<a href="https://github.com/thep0y/fcitx5-themes-candlelight">GitHub - thep0y/fcitx5-themes-candlelight: fcitx5的简约风格皮肤——烛光。</a><br>
里面的winter<br>
它的mac主题遮罩都有明显问题，观感不好不推荐使用</p>
<p>配置修改：</p>
<ul>
<li>临时在当前和第一个输入法之间切换 绑定 <code>Shift</code> 可以方便适应</li>
<li>开启云拼音，把后端改成百度</li>
<li>去拼音里面把前后鼻音啥的纠错打打开</li>
</ul>
<blockquote>
<p>已知问题：<br>
在使用qq的时候智能使用默认的双行输入而不是单行 即使通过<code>ctrl</code>+<code>alt</code>+<code>P</code> 也不可以更改输入模式</p>
</blockquote>
<h2 id="environmentrust加入rust神教喵喵加入rust神教"><a class="markdownIt-Anchor" href="#environmentrust加入rust神教喵喵加入rust神教"></a> Environment(rust)::加入rust神教喵喵加入rust神教</h2>
<p><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  </code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span>  </span><br><span class="line">info: downloading installer  </span><br><span class="line">  </span><br><span class="line">Welcome to Rust!  </span><br><span class="line">  </span><br><span class="line">This will download and install the official compiler for the Rust  </span><br><span class="line">programming language, and its package manager, Cargo.  </span><br><span class="line">  </span><br><span class="line">Rustup metadata and toolchains will be installed into the Rustup  </span><br><span class="line">home directory, located at:  </span><br><span class="line">  </span><br><span class="line"> /home/s3loy/.rustup  </span><br><span class="line">  </span><br><span class="line">This can be modified with the RUSTUP_HOME environment variable.  </span><br><span class="line">  </span><br><span class="line">The Cargo home directory is located at:  </span><br><span class="line">  </span><br><span class="line"> /home/s3loy/.cargo  </span><br><span class="line">  </span><br><span class="line">This can be modified with the CARGO_HOME environment variable.  </span><br><span class="line">  </span><br><span class="line">The cargo, rustc, rustup and other commands will be added to  </span><br><span class="line">Cargo&#x27;s bin directory, located at:  </span><br><span class="line">  </span><br><span class="line"> /home/s3loy/.cargo/bin  </span><br><span class="line">  </span><br><span class="line">This path will then be added to your PATH environment variable by  </span><br><span class="line">modifying the profile files located at:  </span><br><span class="line">  </span><br><span class="line"> /home/s3loy/.profile  </span><br><span class="line"> /home/s3loy/.bash_profile  </span><br><span class="line"> /home/s3loy/.bashrc  </span><br><span class="line"> /home/s3loy/.config/fish/conf.d/rustup.fish  </span><br><span class="line">  </span><br><span class="line">You can uninstall at any time with rustup self uninstall and  </span><br><span class="line">these changes will be reverted.  </span><br><span class="line">  </span><br><span class="line">Current installation options:  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  default host triple: x86_64-unknown-linux-gnu  </span><br><span class="line">    default toolchain: stable (default)  </span><br><span class="line">              profile: default  </span><br><span class="line"> modify PATH variable: yes  </span><br><span class="line">  </span><br><span class="line">1) Proceed with standard installation (default - just press enter)  </span><br><span class="line">2) Customize installation  </span><br><span class="line">3) Cancel installation</span><br></pre></td></tr></table></figure>
<p>直接回车就好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;  </span><br><span class="line">  </span><br><span class="line"> stable-x86_64-unknown-linux-gnu installed - rustc 1.90.0 (1159e78c4 2025-09-14)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Rust is installed now. Great!  </span><br><span class="line">  </span><br><span class="line">To get started you may need to restart your current shell.  </span><br><span class="line">This would reload your PATH environment variable to include  </span><br><span class="line">Cargo&#x27;s bin directory ($HOME/.cargo/bin).  </span><br><span class="line">  </span><br><span class="line">To configure your current shell, you need to source  </span><br><span class="line">the corresponding env file under $HOME/.cargo.  </span><br><span class="line">  </span><br><span class="line">This is usually done by running one of the following (note the leading DOT):  </span><br><span class="line">. &quot;$HOME/.cargo/env&quot;            # For sh/bash/zsh/ash/dash/pdksh  </span><br><span class="line">source &quot;$HOME/.cargo/env.fish&quot;  # For fish  </span><br><span class="line">source $&quot;($nu.home-path)/.cargo/env.nu&quot;  # For nushell</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">s3loy@fedora:~$ rustc --version</span><br><span class="line">rustc 1.90.0 (1159e78c4 2025-09-14)</span><br><span class="line">s3loy@fedora:~$ cargo --version</span><br><span class="line">cargo 1.90.0 (840b83a10 2025-07-30)</span><br></pre></td></tr></table></figure>
<h2 id="toolvscode米奇妙妙物"><a class="markdownIt-Anchor" href="#toolvscode米奇妙妙物"></a> Tool(vscode)::米奇妙妙物</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> rpm --import https://packages.microsoft.com/keys/microsoft.asc</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sh -c <span class="string">&#x27;echo -e &quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/vscode.repo&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf check-update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install code</span></span><br></pre></td></tr></table></figure>
<p>插件:</p>
<h2 id="environmentccnjupt-wanted"><a class="markdownIt-Anchor" href="#environmentccnjupt-wanted"></a> Environment(c/c++)::NJUPT wanted</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf group install development-tools</span><br><span class="line"></span><br><span class="line">sudo dnf install gcc-c++</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb --version</span></span><br><span class="line">GNU gdb (Fedora Linux) 16.3-1.fc42</span><br><span class="line">Copyright (C) 2024 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ --version</span></span><br><span class="line">g++ (GCC) 15.2.1 20250808 (Red Hat 15.2.1-1)</span><br><span class="line">Copyright © 2025 Free Software Foundation, Inc.</span><br><span class="line">本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保；</span><br><span class="line">包括没有适销性和某一专用目的下的适用性担保。</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc --version</span></span><br><span class="line">gcc (GCC) 15.2.1 20250808 (Red Hat 15.2.1-1)</span><br><span class="line">Copyright © 2025 Free Software Foundation, Inc.</span><br><span class="line">本程序是自由软件；请参看源代码的版权声明。本软件没有任何担保；</span><br><span class="line">包括没有适销性和某一专用目的下的适用性担保。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Something U can use.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf install cmake</span><br><span class="line"></span><br><span class="line">sudo dnf install qt6-qtbase-devel qt6-qtsvg-devel qt6-qttools-devel</span><br><span class="line"></span><br><span class="line">sudo dnf install qt-creator</span><br></pre></td></tr></table></figure>
<h2 id="environmentfront-endnonononode_module"><a class="markdownIt-Anchor" href="#environmentfront-endnonononode_module"></a> Environment(Front-end)::nonononode_module</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf install nodejs npm</span><br><span class="line"></span><br><span class="line">sudo dnf install google-chrome</span><br><span class="line"></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">nvm install --lts</span><br><span class="line">nvm use --lts</span><br><span class="line">nvm alias default lts/*</span><br><span class="line"></span><br><span class="line">npm install -g pnpm@latest-10</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pnpm -v</span></span><br><span class="line">10.17.1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br><span class="line">11.6.1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nvm -v</span></span><br><span class="line">0.39.7</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v22.20.0</span><br></pre></td></tr></table></figure>
<h2 id="toolweztermfishcome-and-use-wezterm"><a class="markdownIt-Anchor" href="#toolweztermfishcome-and-use-wezterm"></a> Tool(wezTerm+fish)::Come and use wezTerm!</h2>
<p>默认的终端应用是<code>konsole</code>,有一点不满意，于是换成了<strong>wezTerm</strong>+<strong>fish</strong>+<strong>oh my fish</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf copr <span class="built_in">enable</span> wezfurlong/wezterm-nightly</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install wezterm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">chsh -s /usr/bin/fish</span></span><br></pre></td></tr></table></figure>
<p>在<a href="https://www.nerdfonts.com/font-downloads">nerd fonts</a><br>
下载了FiraCode Nerd Font,解压到了<code>~/.fonts</code>文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">fc-cache -fv</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nano ~/.wezterm.lua</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local wezterm = require &#x27;wezterm&#x27;</span><br><span class="line">local config = &#123;&#125;</span><br><span class="line">if wezterm.config_builder then</span><br><span class="line">  config = wezterm.config_builder()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">config.font = wezterm.font_with_fallback(&#123;</span><br><span class="line">  &#x27;FiraCode Nerd Font&#x27;,</span><br><span class="line">  &#x27;Noto Color Emoji&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">config.harfbuzz_features = &#123;&#x27;calt=1&#x27;, &#x27;clig=1&#x27;, &#x27;liga=1&#x27;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.color_scheme = &#x27;Catppuccin Mocha&#x27;</span><br><span class="line"></span><br><span class="line">config.window_background_opacity = 0.95</span><br><span class="line"></span><br><span class="line">config.window_padding = &#123;</span><br><span class="line">  left = 15,</span><br><span class="line">  right = 15,</span><br><span class="line">  top = 15,</span><br><span class="line">  bottom = 10,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.hide_tab_bar_if_only_one_tab = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.default_cursor_style = &#x27;BlinkingBar&#x27;</span><br><span class="line">config.enable_scroll_bar = false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.keys = &#123;</span><br><span class="line">  -- 关闭当前窗格 (Pane)</span><br><span class="line">  &#123;</span><br><span class="line">    key = &#x27;w&#x27;,</span><br><span class="line">    mods = &#x27;ALT&#x27;,</span><br><span class="line">    action = wezterm.action.CloseCurrentPane &#123; confirm = true &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  -- 关闭当前标签页 (Tab)</span><br><span class="line">  &#123;</span><br><span class="line">    key = &#x27;w&#x27;,</span><br><span class="line">    mods = &#x27;CTRL|SHIFT&#x27;,</span><br><span class="line">    action = wezterm.action.CloseCurrentTab &#123; confirm = false &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  -- 水平分割窗格 (左右)</span><br><span class="line">  &#123;</span><br><span class="line">    key = &#x27;-&#x27;,</span><br><span class="line">    mods = &#x27;ALT&#x27;,</span><br><span class="line">    action = wezterm.action.SplitHorizontal &#123; domain = &#x27;CurrentPaneDomain&#x27; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  -- 垂直分割窗格 (上下)</span><br><span class="line">  &#123;</span><br><span class="line">    key = &#x27;=&#x27;,</span><br><span class="line">    mods = &#x27;ALT&#x27;,</span><br><span class="line">    action = wezterm.action.SplitVertical &#123; domain = &#x27;CurrentPaneDomain&#x27; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return config</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish</span><br><span class="line"></span><br><span class="line">omf install pure</span><br><span class="line"></span><br><span class="line">sudo dnf install fzf</span><br><span class="line">sudo dnf install grc</span><br><span class="line"></span><br><span class="line">omf install fzf</span><br><span class="line">omf install grc</span><br><span class="line">omf install nvm</span><br><span class="line">omf install z</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用的是<code>pure</code>主题</p>
<blockquote>
<p>主题预览<br>
<img src="/My-Fedora-Journey/pure.png" alt="preview"></p>
</blockquote>
<h2 id="optimizationsudousing-sudo-without-password"><a class="markdownIt-Anchor" href="#optimizationsudousing-sudo-without-password"></a> Optimization(sudo)::using sudo without password</h2>
<p>因为每次用<code>sudo</code>都需要密码觉得太麻烦了，所以修改了一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure>
<p>修改了这一行<br>
<code>%wheel ALL=(ALL)       NOPASSWD: ALL</code><br>
然后保存就行了，因为本身用户就在wheel用户组内</p>
<h2 id="optimizationauto-loginlogin-without-password"><a class="markdownIt-Anchor" href="#optimizationauto-loginlogin-without-password"></a> Optimization(auto login)::login without password</h2>
<p>系统设置-外观和样式-颜色和主题-全局主题-登录屏幕(SDDM)-右上角的“行为…”-自动登录 选择账户和前端并输入密码</p>
<h2 id="toolwinerunning-exe-on-linux"><a class="markdownIt-Anchor" href="#toolwinerunning-exe-on-linux"></a> Tool(wine)::Running exe on linux</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install wine</span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] to be continued</li>
</ul>
<h2 id="optimizationsuper-desktop快捷方式书写"><a class="markdownIt-Anchor" href="#optimizationsuper-desktop快捷方式书写"></a> Optimization(super .desktop)::快捷方式书写</h2>
<p><code>~/.local/share/applications/feishu.desktop</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Name=飞书</span><br><span class="line">Comment=Feishu | Lark, a work collaboration platform</span><br><span class="line">Exec=/opt/bytedance/feishu/feishu %U</span><br><span class="line">Icon=/opt/bytedance/feishu/product_logo_256.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Network;Office;InstantMessaging;</span><br></pre></td></tr></table></figure>
<h2 id="environmentdockercontainer"><a class="markdownIt-Anchor" href="#environmentdockercontainer"></a> Environment(docker)::Container</h2>
<p><a href="https://docs.docker.com/engine/install/fedora/">Install Docker Engine on Fedora</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dnf upgrade --refresh</span><br><span class="line"></span><br><span class="line">sudo dnf -y install dnf-plugins-core</span><br><span class="line"></span><br><span class="line">sudo dnf remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line">sudo dnf -y install dnf-plugins-core</span><br><span class="line"></span><br><span class="line">sudo dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你要自启用这个</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now docker</span></span><br><span class="line">Created symlink &#x27;/etc/systemd/system/multi-user.target.wants/docker.service&#x27; → &#x27;/usr/lib/systemd/system/docker.service&#x27;.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl start docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker run hello-world</span></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">17eec7bbc9d7: Pull complete</span><br><span class="line">Digest: sha256:54e66cc1dd1fcb1c3c58bd8017914dbed8701e2d8c74d9262e26bd9cc1642d31</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
<h2 id="trickwayland-docker-osxbuilding-macos-with-docker"><a class="markdownIt-Anchor" href="#trickwayland-docker-osxbuilding-macos-with-docker"></a> Trick(Wayland-Docker-OSX)::Building macOS with docker</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it \ </span>                                                          </span><br><span class="line">             --device /dev/kvm \</span><br><span class="line">             -p 50922:10022 \</span><br><span class="line">             -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="line">             -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \</span><br><span class="line">             -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY  \</span><br><span class="line">             -e GENERATE_UNIQUE=true \</span><br><span class="line">             -e MASTER_PLIST_URL=&#x27;https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist&#x27; \</span><br><span class="line">             -e SHORTNAME=sonoma \</span><br><span class="line">             sickcodes/docker-osx:latest</span><br><span class="line">             </span><br></pre></td></tr></table></figure>
<p>还没有成功，死在了盘都装好了打不开来，但因为<code>wayland</code>的<code>display</code>和<code>x11</code>有所区别,所以得参考<code>github</code>内<code>issues</code></p>
<h2 id="toolk8scontainer"><a class="markdownIt-Anchor" href="#toolk8scontainer"></a> Tool(k8s)::Container</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> rpm -Uvh minikube-latest.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube start</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube kubectl -- get pods -A</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl completion fish | <span class="built_in">source</span></span></span><br><span class="line">fish: kubectl: 未找到命令...</span><br><span class="line">提供此文件的软件包是：</span><br><span class="line">&#x27;kubernetes1.29-client&#x27;</span><br><span class="line">&#x27;kubernetes1.30-client&#x27;</span><br><span class="line">&#x27;kubernetes1.31-client&#x27;</span><br><span class="line">&#x27;kubernetes1.32-client&#x27;</span><br><span class="line">&#x27;kubernetes1.33-client&#x27;</span><br><span class="line">&#x27;kubernetes1.34-client&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install kubernetes1.34-client</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl completion fish | <span class="built_in">source</span></span></span><br></pre></td></tr></table></figure>
<h3 id="k8s简单实验nginx服务器"><a class="markdownIt-Anchor" href="#k8s简单实验nginx服务器"></a> k8s简单实验：nginx服务器</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube start</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create deployment nginx-deployment --image=nginx</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get deployment</span></span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   1/1     1            1           43s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-7457467ffd-6fxtv   1/1     Running   0          87s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl expose deployment nginx-deployment --<span class="built_in">type</span>=NodePort --port=80</span></span><br><span class="line">service/nginx-deployment exposed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get service nginx-deployment</span></span><br><span class="line">NAME               TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx-deployment   NodePort   10.98.106.65   &lt;none&gt;        80:31891/TCP   18s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube service nginx-deployment</span></span><br><span class="line">┌───── ┬─────────┬────── ┬───────────── ┐</span><br><span class="line">│ NAMESPACE │       NAME       │ TARGET PORT │            URL            │</span><br><span class="line">├───── ┼─────────┼────── ┼───────────── ┤</span><br><span class="line">│ default   │ nginx-deployment │ 80          │ http://192.168.49.2:31891 │</span><br><span class="line">└───── ┴─────────┴────── ┴───────────── ┘</span><br><span class="line">🎉  正通过默认浏览器打开服务 default/nginx-deployment...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你怎么歪了</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl http://192.168.49.2:31891/</span> </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>二则 多容器实验</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl scale deployment nginx-deployment --replicas=3</span></span><br><span class="line">deployment.apps/nginx-deployment scaled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-7457467ffd-489qf   1/1     Running   0          25s</span><br><span class="line">nginx-deployment-7457467ffd-6fxtv   1/1     Running   0          7m5s</span><br><span class="line">nginx-deployment-7457467ffd-b6km2   1/1     Running   0          25s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete service nginx-deployment</span></span><br><span class="line">service &quot;nginx-deployment&quot; deleted from default namespace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete deployment nginx-deployment</span></span><br><span class="line">deployment.apps &quot;nginx-deployment&quot; deleted from default namespace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl http://192.168.49.2:31891/</span></span><br><span class="line">curl: (7) Failed to connect to 192.168.49.2 port 31891 after 0 ms: Could not connect to server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods</span></span><br><span class="line">No resources found in default namespace.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube stop</span></span><br><span class="line">✋  正在停止节点 &quot;minikube&quot; ...</span><br><span class="line">🛑  正在通过 SSH 关闭“minikube”…</span><br><span class="line">🛑  1 个节点已停止。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube delete</span></span><br><span class="line">🔥  正在删除 docker 中的“minikube”…</span><br><span class="line">🔥  正在删除容器 &quot;minikube&quot; ...</span><br><span class="line">🔥  正在移除 /home/s3loy/.minikube/machines/minikube…</span><br><span class="line">💀  已删除所有关于 &quot;minikube&quot; 集群的痕迹。</span><br></pre></td></tr></table></figure>
<p>三则 多节点创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube start --nodes 3 -p multi-node-cluster</span></span><br><span class="line">😄  Fedora 42 上的 [multi-node-cluster] minikube v1.37.0</span><br><span class="line">✨  自动选择 docker 驱动。其他选项：podman, qemu2, none, ssh</span><br><span class="line">📌  使用具有 root 权限的 Docker 驱动程序</span><br><span class="line">👍  在集群中 &quot;multi-node-cluster&quot; 启动节点 &quot;multi-node-cluster&quot; primary control-plane</span><br><span class="line">🚜  正在拉取基础镜像 v0.0.48 ...</span><br><span class="line">❗  minikube was unable to download gcr.io/k8s-minikube/kicbase:v0.0.48, but successfully downloaded docker.io/kicbase/stable:v0.0.48@sha256:7171c97a51623558720f8e5878e4f4637da093e2f2ed589997bedc6c1549b2b1 as a fallback image</span><br><span class="line">🔥  创建 docker container（CPU=2，内存=3072MB）...</span><br><span class="line">🐳  正在 Docker 28.4.0 中准备 Kubernetes v1.34.0…</span><br><span class="line">🔗  配置 CNI (Container Networking Interface) ...</span><br><span class="line">🔎  正在验证 Kubernetes 组件...</span><br><span class="line">    ▪ 正在使用镜像 gcr.io/k8s-minikube/storage-provisioner:v5</span><br><span class="line">🌟  启用插件： storage-provisioner, default-storageclass</span><br><span class="line"></span><br><span class="line">👍  在集群中 &quot;multi-node-cluster&quot; 启动节点 &quot;multi-node-cluster-m02&quot; worker</span><br><span class="line">🚜  正在拉取基础镜像 v0.0.48 ...</span><br><span class="line">🔥  创建 docker container（CPU=2，内存=3072MB）...</span><br><span class="line">🌐  找到的网络选项：</span><br><span class="line">    ▪ NO_PROXY=192.168.49.2</span><br><span class="line">🐳  正在 Docker 28.4.0 中准备 Kubernetes v1.34.0…</span><br><span class="line">    ▪ env NO_PROXY=192.168.49.2</span><br><span class="line">🔎  正在验证 Kubernetes 组件...</span><br><span class="line"></span><br><span class="line">👍  在集群中 &quot;multi-node-cluster&quot; 启动节点 &quot;multi-node-cluster-m03&quot; worker</span><br><span class="line">🚜  正在拉取基础镜像 v0.0.48 ...</span><br><span class="line">🔥  创建 docker container（CPU=2，内存=3072MB）...</span><br><span class="line">🌐  找到的网络选项：</span><br><span class="line">    ▪ NO_PROXY=192.168.49.2,192.168.49.3</span><br><span class="line">🐳  正在 Docker 28.4.0 中准备 Kubernetes v1.34.0…</span><br><span class="line">    ▪ env NO_PROXY=192.168.49.2</span><br><span class="line">    ▪ env NO_PROXY=192.168.49.2,192.168.49.3                                                                                                                                         🔎  正在验证 Kubernetes 组件...</span><br><span class="line">🏄  完成！kubectl 现在已配置，默认使用&quot;multi-node-cluster&quot;集群和&quot;default&quot;命名空间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span></span><br><span class="line">NAME                     STATUS   ROLES           AGE     VERSION</span><br><span class="line">multi-node-cluster       Ready    control-plane   3m21s   v1.34.0</span><br><span class="line">multi-node-cluster-m02   Ready    &lt;none&gt;          3m8s    v1.34.0</span><br><span class="line">multi-node-cluster-m03   Ready    &lt;none&gt;          2m58s   v1.34.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube status -p multi-node-cluster</span></span><br><span class="line">multi-node-cluster</span><br><span class="line">type: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br><span class="line"></span><br><span class="line">multi-node-cluster-m02</span><br><span class="line">type: Worker</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line"></span><br><span class="line">multi-node-cluster-m03</span><br><span class="line">type: Worker</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl create deployment nginx-deployment --image=nginx</span></span><br><span class="line">deployment.apps/nginx-deployment created</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl scale deployment nginx-deployment --replicas=6</span></span><br><span class="line">deployment.apps/nginx-deployment scaled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get pods -o wide</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE                     NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-deployment-7457467ffd-67tv9   1/1     Running   0          54s   10.244.2.2   multi-node-cluster-m03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-7457467ffd-6vt69   1/1     Running   0          54s   10.244.2.3   multi-node-cluster-m03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-7457467ffd-8wsmk   1/1     Running   0          54s   10.244.1.3   multi-node-cluster-m02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-7457467ffd-g9ngm   1/1     Running   0          54s   10.244.0.4   multi-node-cluster       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-7457467ffd-gjk49   1/1     Running   0          75s   10.244.1.2   multi-node-cluster-m02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-7457467ffd-vffxz   1/1     Running   0          54s   10.244.0.3   multi-node-cluster       &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube profile list</span></span><br><span class="line">┌──────────┬────┬──── ┬───────┬──── ┬────┬─── ┬────────┬──────────┐</span><br><span class="line">│      PROFILE       │ DRIVER │ RUNTIME │      IP      │ VERSION │ STATUS │ NODES │ ACTIVE PROFILE │ ACTIVE KUBECONTEXT │</span><br><span class="line">├──────────┼────┼──── ┼───────┼──── ┼────┼─── ┼────────┼──────────┤</span><br><span class="line">│ multi-node-cluster │ docker │ docker  │ 192.168.49.2 │ v1.34.0 │ OK     │ 3     │                │ *                  │</span><br><span class="line">└──────────┴────┴──── ┴───────┴──── ┴────┴─── ┴────────┴──────────┘</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl expose deployment nginx-deployment --<span class="built_in">type</span>=NodePort --port=80</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube ip -p multi-node-cluster</span></span><br><span class="line">192.168.49.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl 192.168.49.2</span></span><br><span class="line">curl: (7) Failed to connect to 192.168.49.2 port 80 after 0 ms: Could not connect to server</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get service nginx-deployment</span></span><br><span class="line">NAME               TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx-deployment   NodePort   10.106.236.139   &lt;none&gt;        80:32530/TCP   3m38s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl http://192.168.49.2:32530/</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete service nginx-deployment</span></span><br><span class="line">service &quot;nginx-deployment&quot; deleted from default namespace</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete deployment nginx-deployment</span></span><br><span class="line">deployment.apps &quot;nginx-deployment&quot; deleted from default namespace</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">minikube delete -p multi-node-cluster</span></span><br><span class="line">🔥  正在删除 docker 中的“multi-node-cluster”…</span><br><span class="line">🔥  正在删除容器 &quot;multi-node-cluster&quot; ...</span><br><span class="line">🔥  正在删除容器 &quot;multi-node-cluster-m02&quot; ...</span><br><span class="line">🔥  正在删除容器 &quot;multi-node-cluster-m03&quot; ...</span><br><span class="line">🔥  正在移除 /home/s3loy/.minikube/machines/multi-node-cluster…</span><br><span class="line">🔥  正在移除 /home/s3loy/.minikube/machines/multi-node-cluster-m02…</span><br><span class="line">🔥  正在移除 /home/s3loy/.minikube/machines/multi-node-cluster-m03…</span><br><span class="line">💀  已删除所有关于 &quot;multi-node-cluster&quot; 集群的痕迹。</span><br></pre></td></tr></table></figure>
<h3 id="k8s概念简单解析和minikube使用方法"><a class="markdownIt-Anchor" href="#k8s概念简单解析和minikube使用方法"></a> k8s概念简单解析和minikube使用方法</h3>
<h4 id="k8s内重要概念"><a class="markdownIt-Anchor" href="#k8s内重要概念"></a> k8s内重要概念</h4>
<ul>
<li>Pod (最小工作单元)</li>
</ul>
<blockquote>
<p>Pod 是 K8s 中可以创建和管理的最小部署单元。一个 Pod 包含一个或多个紧密相关的容器（比如一个主应用容器和一个日志收集容器）。这些容器共享同一个网络环境和存储卷，可以把它们看作一个整体。<br>
通常使用更高层管理。</p>
</blockquote>
<ul>
<li>Deployment (部署)</li>
</ul>
<blockquote>
<p>确保指定数量的 Pod 正在运行。副本管理，滚动更新，回滚三大功能。</p>
</blockquote>
<ul>
<li>Service (服务)</li>
</ul>
<blockquote>
<p>服务发现，会自动跟踪其后端 Pod 的变化；负载均衡，将请求优先发送到健康 Pod</p>
</blockquote>
<ul>
<li>Namespace (命名空间)</li>
</ul>
<blockquote>
<p>资源进行逻辑上的隔离,创建的 Deployment、Service 等资源都属于某一个 Namespace。默认情况下，它们都在 default 命名空间里.</p>
</blockquote>
<h4 id="kubectl"><a class="markdownIt-Anchor" href="#kubectl"></a> kubectl</h4>
<p><a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/"><strong>kube control</strong></a>用于 K8s 集群交互</p>
<p>使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl [<span class="built_in">command</span>] [TYPE] [NAME] [flags]</span></span><br></pre></td></tr></table></figure>
<h2 id="workshopobsidiangdrivercloneworking-with-different-workspaces"><a class="markdownIt-Anchor" href="#workshopobsidiangdrivercloneworking-with-different-workspaces"></a> Workshop(Obsidian+Gdrive+rclone)::working with different workspaces</h2>
<p>方案：</p>
<ul>
<li>markdown：<strong>Obsidian+OneDrive</strong></li>
<li>coding：<strong>github&amp;gitlab</strong></li>
<li>[ ] TODO： CI/CD</li>
</ul>
<p><a href="https://github.com/abraunegg/onedrive/blob/master/docs/install.md">OneDrive for linux</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install onedrive</span></span><br></pre></td></tr></table></figure>
<p>OneDrive失败，<strong>南邮管理员没开启认证</strong></p>
<blockquote>
<p>切换方案 Google Drive</p>
</blockquote>
<p><a href="https://rclone.org/"><strong>rclone</strong></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> -v ; curl https://rclone.org/install.sh | <span class="built_in">sudo</span> bash</span></span><br><span class="line">...</span><br><span class="line">rclone v1.71.1 has successfully installed.</span><br><span class="line">Now run &quot;rclone config&quot; for setup. Check https://rclone.org/docs/ for more details.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone config</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后续可以参考https://www.cnblogs.com/Undefined443/p/18615701</span></span><br></pre></td></tr></table></figure>
<p>使用方法:</p>
<blockquote>
<p>我的本地config命名就是 <strong>work_space</strong> ()<br>
所以如果config命名不一样救修改 &quot; : &quot;前面的那个work_space即可<br>
位置要根据自己文件存放的位置使用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从上游拉下来</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">sync</span> -P work_space:work_space /workshop/work_space/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从本地提交上去</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">sync</span> -P /workshop/work_space/ work_space:work_space</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone lsd work_space:work_space</span>   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">ls</span> work_space:work_space</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">blog备份</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">sync</span> -P /workshop/Blog/source/_posts  work_space:work_space/s3_workshop/Blogs</span>  </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">sync</span> -P work_space: /workshop/work_space/ --drive-root-folder-id 1gQg-FNNg2kLR8vnQMV9b5-Mqpro2roMN <span class="comment">#下载</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rclone <span class="built_in">sync</span> -P /workshop/work_space/ work_space: --drive-root-folder-id 1gQg-FNNg2kLR8vnQMV9b5-Mqpro2roMN <span class="comment">#上传</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>新的方法：<br>
使用了fish的自定义函数，创建了一个workshop指令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> workshop --description <span class="string">&quot;Sync local workshop directory with Google Drive&quot;</span></span><br><span class="line">    <span class="built_in">set</span> filter_file ~/.config/rclone/filter-rules.txt</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span> rclone_opts --checkers=16 --transfers=2 --low-level-retries=20</span><br><span class="line"></span><br><span class="line">    switch <span class="variable">$argv</span>[1]</span><br><span class="line">        <span class="keyword">case</span> pull</span><br><span class="line">            <span class="built_in">echo</span> (set_color green)<span class="string">&quot;⬇️  Syncing from Google Drive to local...&quot;</span>(set_color normal)</span><br><span class="line">            rclone <span class="built_in">sync</span> -P work_space: /workshop/work_space/ --drive-root-folder-id 1gQg-FNNg2kLR8vnQMV9b5-Mqpro2roMN --filter-from <span class="variable">$filter_file</span> <span class="variable">$rclone_opts</span></span><br><span class="line">            <span class="built_in">echo</span> (set_color green)<span class="string">&quot;✅ Pull complete.&quot;</span>(set_color normal)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> push</span><br><span class="line">            <span class="built_in">echo</span> (set_color cyan)<span class="string">&quot;⬆️  Syncing from local to Google Drive...&quot;</span>(set_color normal)</span><br><span class="line">            rclone <span class="built_in">sync</span> -P /workshop/work_space/ work_space: --drive-root-folder-id 1gQg-FNNg2kLR8vnQMV9b5-Mqpro2roMN --filter-from <span class="variable">$filter_file</span> <span class="variable">$rclone_opts</span></span><br><span class="line">            <span class="built_in">echo</span> (set_color cyan)<span class="string">&quot;✅ Push complete.&quot;</span>(set_color normal)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Usage: workshop [subcommand]&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Subcommands:&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> (set_color green)<span class="string">&quot;  pull&quot;</span>(set_color normal)<span class="string">&quot;   Download changes from Google Drive&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> (set_color cyan)<span class="string">&quot;  push&quot;</span>(set_color normal)<span class="string">&quot;   Upload local changes to Google Drive&quot;</span></span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="optimizationbluemanbluetooth"><a class="markdownIt-Anchor" href="#optimizationbluemanbluetooth"></a> Optimization(blueman)::Bluetooth</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install bluez gnome-bluetooth</span></span><br><span class="line">仓库更新和加载中:</span><br><span class="line">仓库加载完成。</span><br><span class="line">Package &quot;bluez-5.84-2.fc42.x86_64&quot; is already installed.</span><br><span class="line">Package &quot;gnome-bluetooth-1:47.1-2.fc42.x86_64&quot; is already installed.</span><br><span class="line"></span><br><span class="line">Nothing to do.</span><br></pre></td></tr></table></figure>
<p>但发现仍然识别不到耳机，<br>
于是使用另外一个包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install blueman</span></span><br></pre></td></tr></table></figure>
<p>连接成功</p>
<h2 id="toolvirtualizationvisual-machine"><a class="markdownIt-Anchor" href="#toolvirtualizationvisual-machine"></a> Tool(virtualization)::Visual Machine</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install @virtualization</span></span><br></pre></td></tr></table></figure>
<h2 id="optimizationtlpbattery"><a class="markdownIt-Anchor" href="#optimizationtlpbattery"></a> Optimization(tlp)::Battery</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install tlp tlp-rdw</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> tlp.service</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf copr <span class="built_in">enable</span> sunwire/envycontrol</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install python3-envycontrol</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> <span class="built_in">sudo</span> envycontrol -q</span></span><br><span class="line">hybrid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> envycontrol --switch integrated <span class="comment"># 集成显卡模式</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> envycontrol --switch hybrid <span class="comment"># 混合模式</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> envycontrol --switch discrete <span class="comment"># 独显直连模式</span></span></span><br></pre></td></tr></table></figure>
<h2 id="tricksystemd-analyze-blameoptimization"><a class="markdownIt-Anchor" href="#tricksystemd-analyze-blameoptimization"></a> Trick(systemd-analyze blame)::Optimization</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ systemd-analyze blame</span><br><span class="line">5.338s NetworkManager-wait-online.service</span><br><span class="line">4.232s sys-module-fuse.device</span><br><span class="line">4.171s sys-devices-LNXSYSTM:00-LNXSYBUS:00-MSFT0101:00-tpm-tpm0.device</span><br><span class="line">4.171s dev-tpm0.device</span><br><span class="line">4.117s dev-ttyS3.device</span><br><span class="line">4.117s sys-devices-platform-serial8250-serial8250:0-serial8250:0.3-tty-ttyS3.de&gt;</span><br><span class="line">4.115s sys-devices-platform-serial8250-serial8250:0-serial8250:0.2-tty-ttyS2.de&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">感觉性能优化的时候用得到</span><br></pre></td></tr></table></figure>
<h2 id="toolsnapperbackup"><a class="markdownIt-Anchor" href="#toolsnapperbackup"></a> Tool(snapper)::Backup</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install snapper python3-dnf-plugin-snapper</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> snapper -c root create-config /</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">它会自动进行备份</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> snapper list</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">│ 类型   │ 前期 <span class="comment"># │ 日期                               │ 用户 │ 清空     │ 描述</span></span></span><br><span class="line">     │ 用户数据</span><br><span class="line">──┼────────┼────────┼────────────────────────────────────┼──────┼──────────┼──────────┼─────────</span><br><span class="line">0 │ single │        │                                    │ root │          │ current  │</span><br><span class="line">1 │ single │        │ 2025年10月21日 星期二 19时00分00秒 │ root │ timeline │ timeline │</span><br><span class="line">2 │ single │        │ 2025年10月21日 星期二 20时00分00秒 │ root │ timeline │ timeline │</span><br><span class="line">3 │ single │        │ 2025年10月21日 星期二 21时00分00秒 │ root │ timeline │ timeline │</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以参考<a href="https://documentation.suse.com/zh-cn/sles/12-SP5/html/SLES-all/cha-snapper.html">通过 Snapper 进行系统恢复和快照管理 | 管理指南 | SLES 12 SP5</a></p>
<p><code>sudo snapper create --description &quot;进行重要操作前的备份&quot;</code></p>
<h2 id="trickmtu-testnetwork"><a class="markdownIt-Anchor" href="#trickmtu-testnetwork"></a> Trick(MTU test)::Network</h2>
<p>因为发现向<code>google drive</code>上传的时候很慢，刚刚好看一下是不是这一块的问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping -c 3 -M <span class="keyword">do</span> -s 1453 8.8.8.8</span></span><br><span class="line">ping: sendmsg: 消息过长</span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 1453(1481) 字节的数据。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ping -c 3 -M <span class="keyword">do</span> -s 1452 8.8.8.8</span></span><br><span class="line">PING 8.8.8.8 (8.8.8.8) 1452(1480) 字节的数据。</span><br><span class="line">1460 字节，来自 8.8.8.8: icmp_seq=1 ttl=112 时间=45.7 毫秒</span><br></pre></td></tr></table></figure>
<p>尝试出来发现最大MTU是<strong>1480</strong><br>
因此<code>clash-verge</code>里面设置的1500超过了限度，有时候会出问题，可以手动修改，顺手把<code>tun</code>模式换成了<code>System</code>,因为<code>System</code>快啊</p>
<h2 id="previewdesktop嘿嘿嘿"><a class="markdownIt-Anchor" href="#previewdesktop嘿嘿嘿"></a> Preview(Desktop)::嘿嘿嘿</h2>
<p><img src="/My-Fedora-Journey/desktop.png" alt="desktop"><br>
<s>我不是福瑞控🐾</s></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>fedora</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Fast-Learning-FastAPI</title>
    <url>/Fast-Learning-FastAPI/</url>
    <content><![CDATA[<h1 id="fastapi"><a class="markdownIt-Anchor" href="#fastapi"></a> FastAPI</h1>
<p><code>pip install fastapi uvicorn</code></p>
<h2 id="part-1-简单创建"><a class="markdownIt-Anchor" href="#part-1-简单创建"></a> part 1 <strong>简单创建</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hello_world.py</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#*或者在终端中使用uvicorn main:app --reload</span></span><br></pre></td></tr></table></figure>
<p>我们添加<code>@app.get</code>部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>
<p>此时访问<a href="http://127.0.0.1:8000/items/5">http://127.0.0.1:8000/items/5</a>    ，会发现返回了<code>&#123;&quot;item_id&quot;:5&#125;</code>,</p>
<p>如果访问的是<a href="http://127.0.0.1:8000/items/sast">127.0.0.1:8000/items/sast </a>   ，会发现返回的是<code>&#123;&quot;detail&quot;:[&#123;&quot;type&quot;:&quot;int_parsing&quot;,&quot;loc&quot;:[&quot;path&quot;,&quot;item_id&quot;],&quot;msg&quot;:&quot;Input should be a valid integer, unable to parse string as an integer&quot;,&quot;input&quot;:&quot;sast&quot;&#125;]&#125;</code></p>
<p>我们在<code>item_id</code>处使用注解要求其为<code>int</code>类型，能看到它会自动检验。</p>
<p>再向代码中添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_fake_item</span>(<span class="params">skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> fake_items_db[skip : skip + limit]</span><br></pre></td></tr></table></figure>
<p>此时访问<a href="http://127.0.0.1:8000/items/?skip=0&amp;limit=2">http://127.0.0.1:8000/items/?skip=0&amp;limit=2</a>    ，会发现返回是<code>[&#123;&quot;item_name&quot;:&quot;Foo&quot;&#125;,&#123;&quot;item_name&quot;:&quot;Bar&quot;&#125;]</code></p>
<h2 id="part-2-响应模型"><a class="markdownIt-Anchor" href="#part-2-响应模型"></a> part 2 <strong>响应模型</strong></h2>
<p><strong>请求体和 Pydantic 模型</strong></p>
<p>为了定义请求体的结构，FastAPI 使用了 Pydantic 库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<p>然后也可以顺手用<code>requests</code>库来验证一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8000/items/&quot;</span></span><br><span class="line"></span><br><span class="line">my_item = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;111test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;null&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>: <span class="number">1145.14</span>,</span><br><span class="line">  <span class="string">&quot;tax&quot;</span>: <span class="number">666.25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=my_item)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;状态码 (Status Code):&quot;</span>, response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;响应内容 (Response JSON):&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure>
<p><code>状态码 (Status Code): 200 响应内容 (Response JSON): &#123;'name': '111test', 'description': 'null', 'price': 1145.14, 'tax': 666.25&#125;</code></p>
<p>我们可以修改响应结果，为了让部分数据不可见之类的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ItemIn</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemOut</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, response_model=ItemOut</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: ItemIn</span>):</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<p>这样用相同的测试会发现是<code>&#123;'name': '111test', 'price': 1145.14&#125;</code></p>
<h2 id="part-3-依赖注入"><a class="markdownIt-Anchor" href="#part-3-依赖注入"></a> part 3 <strong>依赖注入</strong></h2>
<p><code>Depends</code> 会告诉 <code>FastAPI</code>，``read_items<code>函数依赖于</code>common_parameters` 函数的返回值。它的核心优势在于 <strong>代码复用</strong> 和 <strong>逻辑分离</strong>。</p>
<h3 id="31-共享通用参数"><a class="markdownIt-Anchor" href="#31-共享通用参数"></a> 3.1 共享通用参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是一个“依赖项”函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">common_parameters</span>(<span class="params">q: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>, skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;q&quot;</span>: q, <span class="string">&quot;skip&quot;</span>: skip, <span class="string">&quot;limit&quot;</span>: limit&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.9+ 推荐使用 Annotated 来组织 Depends</span></span><br><span class="line"><span class="comment"># CommonsDep 的意思就是：我需要一个 dict，这个 dict 是通过调用 common_parameters 函数得到的</span></span><br><span class="line">CommonsDep = Annotated[<span class="built_in">dict</span>, Depends(common_parameters)]</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;item_name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line">fake_users_db = [&#123;<span class="string">&quot;user_name&quot;</span>: <span class="string">&quot;Alice&quot;</span>&#125;, &#123;<span class="string">&quot;user_name&quot;</span>: <span class="string">&quot;Bob&quot;</span>&#125;, &#123;<span class="string">&quot;user_name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">commons: CommonsDep</span>):</span><br><span class="line">    <span class="comment"># commons 参数现在就是一个字典，比如 &#123;&quot;q&quot;: None, &quot;skip&quot;: 0, &quot;limit&quot;: 100&#125;</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> commons[<span class="string">&quot;q&quot;</span>]:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;query&quot;</span>: commons[<span class="string">&quot;q&quot;</span>]&#125;)</span><br><span class="line">    </span><br><span class="line">    items = fake_items_db[commons[<span class="string">&quot;skip&quot;</span>] : commons[<span class="string">&quot;skip&quot;</span>] + commons[<span class="string">&quot;limit&quot;</span>]]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;items&quot;</span>: items&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_users</span>(<span class="params">commons: CommonsDep</span>):</span><br><span class="line">    <span class="comment"># read_users 函数也轻松地复用了分页和查询逻辑</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> commons[<span class="string">&quot;q&quot;</span>]:</span><br><span class="line">        response.update(&#123;<span class="string">&quot;query&quot;</span>: commons[<span class="string">&quot;q&quot;</span>]&#125;)</span><br><span class="line">    </span><br><span class="line">    users = fake_users_db[commons[<span class="string">&quot;skip&quot;</span>] : commons[<span class="string">&quot;skip&quot;</span>] + commons[<span class="string">&quot;limit&quot;</span>]]</span><br><span class="line">    response.update(&#123;<span class="string">&quot;users&quot;</span>: users&#125;)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<p>现在，<code>/items/ </code>和 <code>/users/</code> 两个端点都拥有了同样的分页和查询能力，而我们只写了一次核心逻辑。这就是依赖注入最直观的好处。</p>
<h3 id="32-依赖项作为守卫"><a class="markdownIt-Anchor" href="#32-依赖项作为守卫"></a> 3.2 依赖项作为“守卫”</h3>
<p>依赖注入一个更强大的用途是处理认证和授权</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Header, HTTPException</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">verify_token</span>(<span class="params">x_token: Annotated[<span class="built_in">str</span>, Header(<span class="params"></span>)]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个依赖项会检查请求头中是否包含 &#x27;X-Token&#x27;，并且值是否为 &#x27;fake-super-secret-token&#x27;</span></span><br><span class="line"><span class="string">    Header() 告诉 FastAPI 这个参数要从请求头里获取。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x_token != <span class="string">&quot;fake-super-secret-token&quot;</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">&quot;X-Token header invalid&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/protected-route/&quot;</span>, dependencies=[Depends(<span class="params">verify_token</span>)]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_protected_route</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个端点被依赖项保护起来了。</span></span><br><span class="line"><span class="string">    只有当请求头包含 X-Token: fake-super-secret-token 时，才能访问成功。</span></span><br><span class="line"><span class="string">    否则，客户端会直接收到 400 错误。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Welcome, you have the correct token!&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="part-4-组织大型应用"><a class="markdownIt-Anchor" href="#part-4-组织大型应用"></a> part 4 组织大型应用</h2>
<p>当API越来越多，把所有东西都写在同一个 <code>main.py</code> 文件里会变得难以维护。<code>APIRouter</code> 允许你将API按功能模块拆分到不同的文件中。</p>
<p>文件树如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/my_app</span><br><span class="line">|-- /routers</span><br><span class="line">|   |-- items.py</span><br><span class="line">|   |-- users.py</span><br><span class="line">|-- main.py</span><br></pre></td></tr></table></figure>
<p>然后内容如下</p>
<p><code>routers/items.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># routers/items.py</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter, HTTPException</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个 APIRouter 实例</span></span><br><span class="line">router = APIRouter(</span><br><span class="line">    prefix=<span class="string">&quot;/items&quot;</span>,            <span class="comment"># 为这个路由下的所有路径添加URL前缀</span></span><br><span class="line">    tags=[<span class="string">&quot;Items&quot;</span>],             <span class="comment"># 在API文档中为它们分组</span></span><br><span class="line">    responses=&#123;<span class="number">404</span>: &#123;<span class="string">&quot;description&quot;</span>: <span class="string">&quot;Item not found&quot;</span>&#125;&#125;, <span class="comment"># 统一的错误响应</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Baz&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&quot;</span>, response_model=<span class="type">List</span>[Item]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> fake_items_db[skip : skip + limit]</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据ID获取单个物品。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 在真实应用中，这里会是数据库查询</span></span><br><span class="line">    <span class="keyword">if</span> item_id &gt;= <span class="built_in">len</span>(fake_items_db) <span class="keyword">or</span> item_id &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;Item not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> fake_items_db[item_id]</span><br></pre></td></tr></table></figure>
<p><code>routers/users.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># routers/users.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter, HTTPException</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, EmailStr</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserBase</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr  <span class="comment"># Pydantic内置的Email验证类型</span></span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCreate</span>(<span class="title class_ inherited__">UserBase</span>):</span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPublic</span>(<span class="title class_ inherited__">UserBase</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    is_active: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">router = APIRouter(</span><br><span class="line">    prefix=<span class="string">&quot;/users&quot;</span>,</span><br><span class="line">    tags=[<span class="string">&quot;Users&quot;</span>],</span><br><span class="line">    responses=&#123;<span class="number">404</span>: &#123;<span class="string">&quot;description&quot;</span>: <span class="string">&quot;User not found&quot;</span>&#125;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fake_users_db = &#123;</span><br><span class="line">    <span class="number">1</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;john.doe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;john.doe@example.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hashed_password&quot;</span>: <span class="string">&quot;fake_hashed_password_123&quot;</span>, <span class="comment"># 模拟存储的是哈希后的密码</span></span><br><span class="line">        <span class="string">&quot;is_active&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;jane.smith&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: <span class="string">&quot;jane.smith@example.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;Jane Smith&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hashed_password&quot;</span>: <span class="string">&quot;another_fake_password_456&quot;</span>,</span><br><span class="line">        <span class="string">&quot;is_active&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&quot;</span>, response_model=<span class="type">List</span>[UserPublic]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_users</span>(<span class="params">skip: <span class="built_in">int</span> = <span class="number">0</span>, limit: <span class="built_in">int</span> = <span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取一个用户列表，同样支持分页。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    users_list = <span class="built_in">list</span>(fake_users_db.values())</span><br><span class="line">    <span class="keyword">return</span> users_list[skip : skip + limit]</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&quot;/&quot;</span>, response_model=UserPublic, status_code=<span class="number">201</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">user: UserCreate</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建一个新用户。</span></span><br><span class="line"><span class="string">    在真实世界中，你会在这里哈希密码，然后存入数据库。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    new_user_id = <span class="built_in">max</span>(fake_users_db.keys()) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    db_user = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: new_user_id,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: user.username,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: user.email,</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span>: user.full_name,</span><br><span class="line">        <span class="string">&quot;hashed_password&quot;</span>: <span class="string">f&quot;hashed_<span class="subst">&#123;user.password&#125;</span>&quot;</span>, <span class="comment"># 假装哈希了密码</span></span><br><span class="line">        <span class="string">&quot;is_active&quot;</span>: <span class="literal">True</span>, </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fake_users_db[new_user_id] = db_user</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> db_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/&#123;user_id&#125;&quot;</span>, response_model=UserPublic</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_user</span>(<span class="params">user_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据ID获取单个用户信息。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> fake_users_db:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">&quot;User not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> fake_users_db[user_id]</span><br></pre></td></tr></table></figure>
<p><code>main.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> routers <span class="keyword">import</span> items, users  <span class="comment"># &lt;-- 在这里导入 users</span></span><br><span class="line"></span><br><span class="line">app = FastAPI(title=<span class="string">&quot;我的模块化大型应用&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.include_router(items.router)</span><br><span class="line">app.include_router(users.router)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Welcome to the main application&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>思考</strong>：目前items和users的数据是完全隔离的，并且每次服务器重启都会丢失。在真实应用中，这些数据应该存放在一个共享的、持久化的数据库中。接下来，我们将学习如何将FastAPI与真实数据库连接起来。</p>
</blockquote>
<h2 id="part-5-异步数据库操作"><a class="markdownIt-Anchor" href="#part-5-异步数据库操作"></a> part 5 异步数据库操作</h2>
<p>到目前为止，我们都使用<code>Python</code>列表或字典作为假数据库。现在，我们将学习如何将<code>FastAPI</code>与一个真正的SQL数据库（以<code>PostgreSQL</code>为例）进行异步交互。</p>
<ul>
<li>[ ] To be continued</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>FastAPI</tag>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-enginex</title>
    <url>/Nginx-enginex/</url>
    <content><![CDATA[<h2 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> installation</h2>
<p><strong>on arch linux</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -Syu</span><br><span class="line">$ <span class="built_in">sudo</span> pacman -S nginx</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> systemctl start nginx.service</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># $ sudo systemctl status nginx.service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s3loy@archlinux ~]$ ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:4f:fa:7f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    altname enx000c294ffa7f</span><br><span class="line">    inet 192.168.209.128/24 brd 192.168.209.255 scope global dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1592sec preferred_lft 1367sec</span><br><span class="line">    inet6 fe80::98ef:2b0d:cbd3:648c/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"> <span class="comment">#  inet 192.168.209.128</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>主机直接访问<a href="http://192.168.209.128/">http://192.168.209.128/</a>    就可以看到<code>Welcome to nginx!</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#user http;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load all installed modules</span></span><br><span class="line">include modules.d/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>block</code>
<ul>
<li><code>http &#123; ... &#125;</code>: 配置 <code>HTTP </code>相关功能的顶级块。几乎所有的 Web 服务配置都在这里面。</li>
<li><code>server &#123; ... &#125;</code>: 定义一个“虚拟主机”,可以在一个 <code>Nginx</code> 里配置多个 <code>server</code> 块，来托管不同的网站</li>
<li><code>location / &#123; ... &#125;</code>: 定义当请求的 URL 匹配某个路径时，应该如何处理。<code>location / </code>表示匹配所有请求。</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/my-website/images</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;&lt;h1&gt;hello,this is our first website&lt;/h1&gt;&quot;</span> &gt; ~/my-website/index.html</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;&lt;p&gt;this is about&lt;/p&gt;&quot;</span> &gt; ~/my-website/about.html</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak</span><br><span class="line"><span class="comment"># backup</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="comment"># ... http 块内部 ...</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost; </span><br><span class="line">    <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /home/s3loy/my-website;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> nginx -t</span><br><span class="line"><span class="comment">#配置成功即可</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://192.168.209.128/about.html">http://192.168.209.128/about.html</a>   发现<code>403 Forbidden</code></p>
<p>此时考虑到文件夹为新建且处于<code>whoami</code>用户下，所以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep <span class="string">&quot;nginx: worker process&quot;</span></span><br><span class="line">http        2179  0.0  0.1  15388  5140 ?        S    16:13   0:00 nginx: worker process</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> o+x /home/s3loy</span><br><span class="line">$ <span class="built_in">ls</span> -ld ~/my-website</span><br><span class="line">drwxr-xr-x 3 s3loy s3loy 4096 Jul 23 16:10 /home/s3loy/my-website</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>直接重返链接就发现页面可以刷新出来了</p>
<p><strong>当然这也很明显，请不要把网站放在自己的目录当中</strong>。出于隐私和安全考虑，默认权限非常严格</p>
<p>在<code>arch linux</code>当中，<code>http</code>推荐放在<code>/srv/http</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -ld /srv/http</span><br><span class="line">drwxr-xr-x 2 root root 4096 May  3 19:26 /srv/http</span><br></pre></td></tr></table></figure>
<p>在其他很多 <code>Linux</code> 系统上，常用目录是 <code>/var/www/html</code></p>
<h2 id="feature"><a class="markdownIt-Anchor" href="#feature"></a> feature</h2>
<h3 id="nginx-的灵魂事件驱动的异步非阻塞架构"><a class="markdownIt-Anchor" href="#nginx-的灵魂事件驱动的异步非阻塞架构"></a> <strong>Nginx 的灵魂</strong>:<strong>事件驱动的异步非阻塞架构</strong></h3>
<p>我们以这个简单的静态网页为例，当你请求静态文件时，<code>Nginx</code> 的 <code>Worker</code> 进程接收到请求，告诉操作系统内核：“把 <code>~/my-website/index.html</code> 这个文件的数据发给这个用户”。然后 <code>Worker</code> 进程就去处理其他请求了。当内核把文件数据准备好后，会通知 <code>Worker</code> 进程，<code>Worker</code> 进程再把数据发回给浏览器。这个过程极其高效，因为它利用了操作系统的 <code>sendfile</code> 机制，避免了数据在内核和用户空间之间的多次复制，<code>CPU</code> 占用极低。</p>
<hr>
<blockquote>
<p><code>sendfile</code>机制</p>
</blockquote>
<p><strong>用户空间 (<code>User Space</code>)</strong> 和 <strong>内核空间 (<code>Kernel Space</code>)</strong>。</p>
<ul>
<li><strong>用户空间：</strong> 你的应用程序（如 <code>Nginx</code> 进程）运行的地方。</li>
<li><strong>内核空间：</strong> 操作系统内核运行的地方，它能直接操作硬件（如磁盘、网卡）。</li>
</ul>
<h4 id="传统-read-write-方式"><a class="markdownIt-Anchor" href="#传统-read-write-方式"></a> 传统 read() + write() 方式</h4>
<p>当 <code>Nginx</code> 需要发送一个静态文件给客户端时，传统的 I/O 流程如下：</p>
<ol>
<li><strong><code>read()</code> 系统调用：</strong> <code>Nginx</code> 进程发起 <code>read() </code>系统调用，请求读取文件。这会导致一次从<strong>用户空间到内核空间</strong>的上下文切换。</li>
<li><strong>第一次数据复制 (<code>DMA</code>)：</strong> <code>CPU</code> 指示 <code>DMA </code>控制器将文件内容从磁盘读取到<strong>内核空间的缓冲区</strong>。</li>
<li><strong>第二次数据复制 (<code>CPU</code>)：</strong> <code>CPU</code> 将数据从<strong>内核空间缓冲区</strong>复制到<strong>用户空间的 <code>Nginx </code>缓冲区</strong>。<code>read()</code> 调用返回，发生一次从<strong>内核空间到用户空间</strong>的上下文切换。</li>
<li><strong><code>write()</code> 系统调用：</strong> <code>Nginx</code> 进程拿到数据后，发起 <code>write() </code>系统调用，请求发送数据。再次发生一次从<strong>用户空间到内核空间</strong>的上下文切换。</li>
<li><strong>第三次数据复制 (<code>CPU</code>)：</strong> <code>CPU</code> 将数据从<strong>用户空间的<code>Nginx</code>缓冲区</strong>复制到<strong>内核空间的 <code>Socket </code>缓冲区</strong>（与网卡关联）。</li>
<li><strong>第四次数据复制 (<code>DMA</code>)：</strong> <code>DMA</code> 控制器将数据从<strong>内核空间的 <code>Socket</code> 缓冲区</strong>复制到网卡硬件中，然后发送出去。<code>write() </code>调用返回，再次发生一次从<strong>内核空间到用户空间</strong>的上下文切换。</li>
</ol>
<h4 id="sendfile-方式"><a class="markdownIt-Anchor" href="#sendfile-方式"></a> sendfile() 方式</h4>
<p><code>sendfile()</code> 是一个系统调用，它把上述过程大大简化了。</p>
<ol>
<li><strong><code>sendfile() </code>系统调用：</strong> <code>Nginx</code> 进程发起<code>sendfile()</code>系统调用，它包含了输入（文件描述符）和输出（<code>Socket </code>描述符）的信息。发生一次从<strong>用户空间到内核空间</strong>的上下文切换。</li>
<li><strong>第一次数据复制 (<code>DMA</code>)：</strong> <code>DMA</code> 控制器将文件内容从磁盘读取到<strong>内核空间的缓冲区</strong>。</li>
<li><strong>第二次数据复制 (<code>CPU</code>)：</strong> <code>CPU</code> 将数据<strong>直接从内核空间的读缓冲区复制到内核空间的<code>Socket</code>缓冲区</strong>。数据完全没有进入过用户空间！</li>
<li><strong>第三次数据复制 (<code>DMA</code>)：</strong> <code>DMA </code>控制器将数据从<strong>内核空间的 <code>Socket </code>缓冲区</strong>复制到网卡硬件中。<code>sendfile() </code>调用返回，发生一次从<strong>内核空间到用户空间</strong>的上下文切换。</li>
</ol>
<p>总结一下高效之处：</p>
<ul>
<li><strong>2 次上下文切换</strong>：减少了一半。</li>
<li><strong>3 次数据复制</strong>：更重要的是，<strong>CPU 驱动的数据复制只有 1 次，且完全在内核空间内完成</strong>，避免了数据在内核和用户空间之间的拷贝。</li>
</ul>
<p><strong>真正的“零拷贝” (<code>Zero-Copy</code>)：</strong><br>
在更现代的硬件上，<code>sendfile()</code> 还能做到更极致的优化。如果网卡支持 “<code>Scatter-gather DMA</code>” 功能，那么第 3 步的 <code>CPU </code>复制也可以省掉。内核只需要把数据在缓冲区的位置和长度等描述信息传递给网卡，网卡就可以自己去内核缓冲区里拉取数据。此时，数据复制就只剩两次<code> DMA</code> 操作，<code>CPU </code>完全不参与数据拷贝，这就是真正的“零拷贝”。</p>
<blockquote>
<p><code>sendfile</code> 在<code>http</code>块中，可自行寻找。<code>/etc/nginx/nginx.conf</code></p>
</blockquote>
<h3 id="master-worker"><a class="markdownIt-Anchor" href="#master-worker"></a> Master-Worker</h3>
<p>虽然我们用 <code>sudo</code> 来启动和管理 <code>Nginx</code>，但为了安全，<code>Nginx</code> 的 <code>Master </code>进程在启动后，会创建一些低权限的 <strong><code>Worker</code> 进程</strong>。真正去处理用户请求、读取网站文件的，正是这些 <code>Worker</code> 进程。</p>
<p>在 <code>Arch Linux</code> 上，这个低权限用户通常是<code> http</code>。在其他系统（如 <code>Debian/Ubuntu</code>）上可能是 <code>www-data</code>,可以把<code> Nginx</code> 的 <code>Worker</code> 进程想象成一个名叫 <code>http</code> 的普通访客。</p>
<p><code>403 Forbidden</code> 就是因为这个访客在某个环节被拦住了</p>
<h4 id="master-process"><a class="markdownIt-Anchor" href="#master-process"></a> Master Process</h4>
<p><code>Master</code> 进程是 <code>Nginx </code>的入口和管理者，它以<code> root</code> 用户权限启动，因为它需要执行一些特权操作。它的核心职责包括：</p>
<ul>
<li><strong>读取和验证配置：</strong> 启动时，它会读取 <code>nginx.conf </code>并检查语法是否正确。</li>
<li><strong>绑定特权端口：</strong> 监听低于 <code>1024</code> 的端口（如 <code>80</code>, <code>443</code>）需要 <code>root</code> 权限。<code>Master</code> 进程负责绑定这些端口。</li>
<li><strong>创建和管理 Worker 进程：</strong> 根据配置 (<code>worker_processes</code>) 创建指定数量的 <code>Worker</code> 进程。这些 <code>Worker </code>进程会<strong>继承</strong>已经打开的监听端口。</li>
<li><strong>以低权限运行 Worker：</strong> 出于安全考虑，<code>Master</code> 进程会以一个普通用户（如<code>http</code>或 <code>www-data</code>）的身份来启动 <code>Worker</code> 进程。这样，即使 <code>Worker</code> 进程被嘿壳利用，其破坏能力也被限制在该用户的权限范围内。🤔</li>
<li><strong>处理控制信号：</strong> <code>Master</code> 进程负责响应来自管理员的指令，例如：
<ul>
<li><code>nginx -s reload</code>: 平滑重载配置。</li>
<li><code>nginx -s quit</code>: 优雅地关闭。</li>
<li><code>nginx -s stop</code>: 快速关闭。</li>
</ul>
</li>
<li><strong>监控 Worker 状态：</strong> 持续监控 <code>Worker</code> 进程的健康状况，如果某个 <code>Worker</code> 异常退出，<code>Master </code>会立即重新启动一个新的 <code>Worker</code> 来替代它。</li>
<li><strong>日志文件管理：</strong> 负责打开日志文件。</li>
</ul>
<p><strong>关键点：</strong> <code>Master</code> 进程不处理任何客户端的请求。它只做管理工作。</p>
<h4 id="2-worker-processes"><a class="markdownIt-Anchor" href="#2-worker-processes"></a> 2. Worker Processes</h4>
<p>Worker 进程是真正处理业务的“劳动力”。它们由 Master 进程创建，并以低权限用户运行。</p>
<p><strong>核心工作机制：事件驱动 + 异步非阻塞 I/O</strong></p>
<ol>
<li><strong>共享监听套接字 (<code>Shared Listening Sockets</code>):</strong><br>
所有 <code>Worker</code> 进程都从 <code>Master</code> 进程继承了同一个监听套接字（<code>listening socket</code>）。当一个新的客户端连接请求到达时，操作系统会唤醒这些正在等待的 <code>Worker</code> 进程。</li>
<li><strong>争抢连接 (<code>accept_mutex</code>):</strong><br>
为了避免多个 <code>Worker</code> 同时去处理同一个新连接（即“惊群效应” <code>Thundering Herd</code>），<code>Nginx </code>内部有一个 <code>accept_mutex</code> 锁。只有一个 <code>Worker </code>能成功获取到这个锁，然后调用 <code>accept() </code>来建立连接。这保证了连接处理的负载在多个 <code>Worker</code> 之间是相对均衡的。</li>
<li><strong>事件循环和 <code>epoll</code>:</strong><br>
每个 <code>Worker</code> 进程内部都有一个高效的<strong>事件循环</strong>。它利用操作系统的 <code>epoll</code> (在<code> Linux</code> 上) 或 <code>kqueue</code> (在 <code>BSD/macOS</code> 上) 这样的 <code>I/O</code> 多路复用技术。
<ul>
<li><strong>注册事件：</strong> 当一个 <code>Worker</code> 接受一个新连接后，它不会傻等客户端发数据。它只是把这个连接（<code>socket</code>）注册到<code>epoll</code>实例上，并告诉 <code>epoll</code>：“当这个连接上有数据可读时，请通知我。”</li>
<li><strong>等待事件：</strong> 然后，<code>Worker</code> 进程就调用 <code>epoll_wait()</code>，把自己“挂起”，等待 <code>epoll</code> 的通知。它不消耗 <code>CPU</code>。</li>
<li><strong>处理就绪事件：</strong> 当一个或多个连接上的事件就绪时（比如，客户端发来了数据，或者发送缓冲区变空可以继续写入了），<code>epoll_wait()</code> 会被唤醒，并返回一个“就绪事件”的列表。</li>
<li><strong>处理与再注册：</strong> <code>Worker</code> 进程遍历这个列表，对每个就绪的连接执行相应的<strong>非阻塞操作</strong>（如 <code>read()</code> 读取数据，<code>write()</code> 或 <code>sendfile()</code> 发送数据）。处理完一个连接后，它会再次向 <code>epol</code>l 更新这个连接需要监听的下一个事件。</li>
</ul>
</li>
</ol>
<p><strong>流程的关键优势：</strong></p>
<ul>
<li><strong>单线程高效处理：</strong> 每个 Worker 进程是单线程的，避免了线程切换的开销和锁的复杂性。</li>
<li><strong>永不阻塞</strong></li>
<li><strong>连接数与内存消耗解耦：</strong> 一个 Worker 可以轻松维护数万个连接</li>
</ul>
<hr>
<ul>
<li>[ ] to be continued</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>web</tag>
      </tags>
  </entry>
</search>
